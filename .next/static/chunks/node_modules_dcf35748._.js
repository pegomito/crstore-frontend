(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/next/navigation.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
module.exports = __turbopack_context__.r("[project]/node_modules/next/dist/client/components/navigation.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/@zag-js/auto-resize/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "autoResizeInput": (()=>autoResizeInput),
    "autoresizeTextarea": (()=>autoresizeTextarea)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
;
// src/autoresize-input.ts
function getVisualStyles(node) {
    if (!node) return;
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getComputedStyle"])(node);
    return "box-sizing:" + style.boxSizing + ";border-left:" + style.borderLeftWidth + " solid red;border-right:" + style.borderRightWidth + " solid red;font-family:" + style.fontFamily + ";font-feature-settings:" + style.fontFeatureSettings + ";font-kerning:" + style.fontKerning + ";font-size:" + style.fontSize + ";font-stretch:" + style.fontStretch + ";font-style:" + style.fontStyle + ";font-variant:" + style.fontVariant + ";font-variant-caps:" + style.fontVariantCaps + ";font-variant-ligatures:" + style.fontVariantLigatures + ";font-variant-numeric:" + style.fontVariantNumeric + ";font-weight:" + style.fontWeight + ";letter-spacing:" + style.letterSpacing + ";margin-left:" + style.marginLeft + ";margin-right:" + style.marginRight + ";padding-left:" + style.paddingLeft + ";padding-right:" + style.paddingRight + ";text-indent:" + style.textIndent + ";text-transform:" + style.textTransform;
}
// src/autoresize-input.ts
function createGhostElement(doc) {
    var el = doc.createElement("div");
    el.id = "ghost";
    el.style.cssText = "display:inline-block;height:0;overflow:hidden;position:absolute;top:0;visibility:hidden;white-space:nowrap;";
    doc.body.appendChild(el);
    return el;
}
function autoResizeInput(input) {
    if (!input) return;
    const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDocument"])(input);
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(input);
    const ghost = createGhostElement(doc);
    const cssText = getVisualStyles(input);
    if (cssText) ghost.style.cssText += cssText;
    function resize() {
        win.requestAnimationFrame(()=>{
            ghost.innerHTML = input.value;
            const rect = win.getComputedStyle(ghost);
            input?.style.setProperty("width", rect.width);
        });
    }
    resize();
    input?.addEventListener("input", resize);
    input?.addEventListener("change", resize);
    return ()=>{
        doc.body.removeChild(ghost);
        input?.removeEventListener("input", resize);
        input?.removeEventListener("change", resize);
    };
}
var autoresizeTextarea = (el)=>{
    if (!el) return;
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getComputedStyle"])(el);
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(el);
    const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDocument"])(el);
    const resize = ()=>{
        requestAnimationFrame(()=>{
            el.style.height = "auto";
            let newHeight;
            if (style.boxSizing === "content-box") {
                newHeight = el.scrollHeight - (parseFloat(style.paddingTop) + parseFloat(style.paddingBottom));
            } else {
                newHeight = el.scrollHeight + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
            }
            if (style.maxHeight !== "none" && newHeight > parseFloat(style.maxHeight)) {
                if (style.overflowY === "hidden") {
                    el.style.overflowY = "scroll";
                }
                newHeight = parseFloat(style.maxHeight);
            } else if (style.overflowY !== "hidden") {
                el.style.overflowY = "hidden";
            }
            el.style.height = `${newHeight}px`;
        });
    };
    el.addEventListener("input", resize);
    el.form?.addEventListener("reset", resize);
    const elementPrototype = Object.getPrototypeOf(el);
    const descriptor = Object.getOwnPropertyDescriptor(elementPrototype, "value");
    Object.defineProperty(el, "value", {
        ...descriptor,
        set () {
            descriptor?.set?.apply(this, arguments);
            resize();
        }
    });
    const resizeObserver = new win.ResizeObserver(()=>{
        requestAnimationFrame(()=>resize());
    });
    resizeObserver.observe(el);
    const attrObserver = new win.MutationObserver(()=>resize());
    attrObserver.observe(el, {
        attributes: true,
        attributeFilter: [
            "rows",
            "placeholder"
        ]
    });
    doc.fonts?.addEventListener("loadingdone", resize);
    return ()=>{
        el.removeEventListener("input", resize);
        el.form?.removeEventListener("reset", resize);
        doc.fonts?.removeEventListener("loadingdone", resize);
        resizeObserver.disconnect();
        attrObserver.disconnect();
    };
};
;
}}),
"[project]/node_modules/@zag-js/presence/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "connect": (()=>connect),
    "machine": (()=>machine),
    "props": (()=>props)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
// src/presence.connect.ts
function connect(service, _normalize) {
    const { state, send, context } = service;
    const present = state.matches("mounted", "unmountSuspended");
    return {
        skip: !context.get("initial"),
        present,
        setNode (node) {
            if (!node) return;
            send({
                type: "NODE.SET",
                node
            });
        },
        unmount () {
            send({
                type: "UNMOUNT"
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            ...props2,
            present: !!props2.present
        };
    },
    initialState ({ prop }) {
        return prop("present") ? "mounted" : "unmounted";
    },
    refs () {
        return {
            node: null,
            styles: null
        };
    },
    context ({ bindable }) {
        return {
            unmountAnimationName: bindable(()=>({
                    defaultValue: null
                })),
            prevAnimationName: bindable(()=>({
                    defaultValue: null
                })),
            present: bindable(()=>({
                    defaultValue: false
                })),
            initial: bindable(()=>({
                    sync: true,
                    defaultValue: false
                }))
        };
    },
    exit: [
        "clearInitial",
        "cleanupNode"
    ],
    watch ({ track, action, prop }) {
        track([
            ()=>prop("present")
        ], ()=>{
            action([
                "setInitial",
                "syncPresence"
            ]);
        });
    },
    on: {
        "NODE.SET": {
            actions: [
                "setNode",
                "setStyles"
            ]
        }
    },
    states: {
        mounted: {
            on: {
                UNMOUNT: {
                    target: "unmounted",
                    actions: [
                        "clearPrevAnimationName",
                        "invokeOnExitComplete"
                    ]
                },
                "UNMOUNT.SUSPEND": {
                    target: "unmountSuspended"
                }
            }
        },
        unmountSuspended: {
            effects: [
                "trackAnimationEvents"
            ],
            on: {
                MOUNT: {
                    target: "mounted",
                    actions: [
                        "setPrevAnimationName"
                    ]
                },
                UNMOUNT: {
                    target: "unmounted",
                    actions: [
                        "clearPrevAnimationName",
                        "invokeOnExitComplete"
                    ]
                }
            }
        },
        unmounted: {
            on: {
                MOUNT: {
                    target: "mounted",
                    actions: [
                        "setPrevAnimationName"
                    ]
                }
            }
        }
    },
    implementations: {
        actions: {
            setInitial: ({ context })=>{
                if (context.get("initial")) return;
                queueMicrotask(()=>{
                    context.set("initial", true);
                });
            },
            clearInitial: ({ context })=>{
                context.set("initial", false);
            },
            cleanupNode: ({ refs })=>{
                refs.set("node", null);
                refs.set("styles", null);
            },
            invokeOnExitComplete: ({ prop })=>{
                prop("onExitComplete")?.();
            },
            setNode: ({ refs, event })=>{
                refs.set("node", event.node);
            },
            setStyles: ({ refs, event })=>{
                refs.set("styles", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getComputedStyle"])(event.node));
            },
            syncPresence: ({ context, refs, send, prop })=>{
                const presentProp = prop("present");
                if (presentProp) {
                    return send({
                        type: "MOUNT",
                        src: "presence.changed"
                    });
                }
                const node = refs.get("node");
                if (!presentProp && node?.ownerDocument.visibilityState === "hidden") {
                    return send({
                        type: "UNMOUNT",
                        src: "visibilitychange"
                    });
                }
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const animationName = getAnimationName(refs.get("styles"));
                    context.set("unmountAnimationName", animationName);
                    if (animationName === "none" || animationName === context.get("prevAnimationName") || refs.get("styles")?.display === "none" || refs.get("styles")?.animationDuration === "0s") {
                        send({
                            type: "UNMOUNT",
                            src: "presence.changed"
                        });
                    } else {
                        send({
                            type: "UNMOUNT.SUSPEND"
                        });
                    }
                });
            },
            setPrevAnimationName: ({ context, refs })=>{
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    context.set("prevAnimationName", getAnimationName(refs.get("styles")));
                });
            },
            clearPrevAnimationName: ({ context })=>{
                context.set("prevAnimationName", null);
            }
        },
        effects: {
            trackAnimationEvents: ({ context, refs, send })=>{
                const node = refs.get("node");
                if (!node) return;
                const onStart = (event)=>{
                    const target = event.composedPath?.()?.[0] ?? event.target;
                    if (target === node) {
                        context.set("prevAnimationName", getAnimationName(refs.get("styles")));
                    }
                };
                const onEnd = (event)=>{
                    const animationName = getAnimationName(refs.get("styles"));
                    const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
                    if (target === node && animationName === context.get("unmountAnimationName")) {
                        send({
                            type: "UNMOUNT",
                            src: "animationend"
                        });
                    }
                };
                node.addEventListener("animationstart", onStart);
                node.addEventListener("animationcancel", onEnd);
                node.addEventListener("animationend", onEnd);
                const cleanupStyles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setStyle"])(node, {
                    animationFillMode: "forwards"
                });
                return ()=>{
                    node.removeEventListener("animationstart", onStart);
                    node.removeEventListener("animationcancel", onEnd);
                    node.removeEventListener("animationend", onEnd);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nextTick"])(()=>cleanupStyles());
                };
            }
        }
    }
});
function getAnimationName(styles) {
    return styles?.animationName || "none";
}
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "onExitComplete",
    "present",
    "immediate"
]);
;
}}),
"[project]/node_modules/@zag-js/tabs/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "anatomy": (()=>anatomy),
    "connect": (()=>connect),
    "contentProps": (()=>contentProps),
    "machine": (()=>machine),
    "props": (()=>props),
    "splitContentProps": (()=>splitContentProps),
    "splitProps": (()=>splitProps),
    "splitTriggerProps": (()=>splitTriggerProps),
    "triggerProps": (()=>triggerProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/tabs.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("tabs").parts("root", "list", "trigger", "content", "indicator");
var parts = anatomy.build();
var getRootId = (ctx)=>ctx.ids?.root ?? `tabs:${ctx.id}`;
var getListId = (ctx)=>ctx.ids?.list ?? `tabs:${ctx.id}:list`;
var getContentId = (ctx, id)=>ctx.ids?.content ?? `tabs:${ctx.id}:content-${id}`;
var getTriggerId = (ctx, id)=>ctx.ids?.trigger ?? `tabs:${ctx.id}:trigger-${id}`;
var getIndicatorId = (ctx)=>ctx.ids?.indicator ?? `tabs:${ctx.id}:indicator`;
var getListEl = (ctx)=>ctx.getById(getListId(ctx));
var getContentEl = (ctx, id)=>ctx.getById(getContentId(ctx, id));
var getTriggerEl = (ctx, id)=>ctx.getById(getTriggerId(ctx, id));
var getIndicatorEl = (ctx)=>ctx.getById(getIndicatorId(ctx));
var getElements = (ctx)=>{
    const ownerId = CSS.escape(getListId(ctx));
    const selector = `[role=tab][data-ownedby='${ownerId}']:not([disabled])`;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["queryAll"])(getListEl(ctx), selector);
};
var getFirstTriggerEl = (ctx)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["first"])(getElements(ctx));
var getLastTriggerEl = (ctx)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["last"])(getElements(ctx));
var getNextTriggerEl = (ctx, opts)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nextById"])(getElements(ctx), getTriggerId(ctx, opts.value), opts.loopFocus);
var getPrevTriggerEl = (ctx, opts)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prevById"])(getElements(ctx), getTriggerId(ctx, opts.value), opts.loopFocus);
var getOffsetRect = (el)=>{
    return {
        left: el?.offsetLeft ?? 0,
        top: el?.offsetTop ?? 0,
        width: el?.offsetWidth ?? 0,
        height: el?.offsetHeight ?? 0
    };
};
var getRectById = (ctx, id)=>{
    const tab = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["itemById"])(getElements(ctx), getTriggerId(ctx, id));
    return resolveRect(getOffsetRect(tab));
};
var resolveRect = (rect)=>({
        width: `${rect.width}px`,
        height: `${rect.height}px`,
        left: `${rect.left}px`,
        top: `${rect.top}px`
    });
// src/tabs.connect.ts
function connect(service, normalize) {
    const { state, send, context, prop, scope } = service;
    const translations = prop("translations");
    const focused = state.matches("focused");
    const isVertical = prop("orientation") === "vertical";
    const isHorizontal = prop("orientation") === "horizontal";
    const composite = prop("composite");
    function getTriggerState(props2) {
        return {
            selected: context.get("value") === props2.value,
            focused: context.get("focusedValue") === props2.value,
            disabled: !!props2.disabled
        };
    }
    return {
        value: context.get("value"),
        focusedValue: context.get("focusedValue"),
        setValue (value) {
            send({
                type: "SET_VALUE",
                value
            });
        },
        clearValue () {
            send({
                type: "CLEAR_VALUE"
            });
        },
        setIndicatorRect (value) {
            const id = getTriggerId(scope, value);
            send({
                type: "SET_INDICATOR_RECT",
                id
            });
        },
        syncTabIndex () {
            send({
                type: "SYNC_TAB_INDEX"
            });
        },
        selectNext (fromValue) {
            send({
                type: "TAB_FOCUS",
                value: fromValue,
                src: "selectNext"
            });
            send({
                type: "ARROW_NEXT",
                src: "selectNext"
            });
        },
        selectPrev (fromValue) {
            send({
                type: "TAB_FOCUS",
                value: fromValue,
                src: "selectPrev"
            });
            send({
                type: "ARROW_PREV",
                src: "selectPrev"
            });
        },
        focus () {
            const value = context.get("value");
            if (!value) return;
            getTriggerEl(scope, value)?.focus();
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                id: getRootId(scope),
                "data-orientation": prop("orientation"),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                dir: prop("dir")
            });
        },
        getListProps () {
            return normalize.element({
                ...parts.list.attrs,
                id: getListId(scope),
                role: "tablist",
                dir: prop("dir"),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                "aria-orientation": prop("orientation"),
                "data-orientation": prop("orientation"),
                "aria-label": translations?.listLabel,
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSelfTarget"])(event)) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isComposingEvent"])(event)) return;
                    const keyMap = {
                        ArrowDown () {
                            if (isHorizontal) return;
                            send({
                                type: "ARROW_NEXT",
                                key: "ArrowDown"
                            });
                        },
                        ArrowUp () {
                            if (isHorizontal) return;
                            send({
                                type: "ARROW_PREV",
                                key: "ArrowUp"
                            });
                        },
                        ArrowLeft () {
                            if (isVertical) return;
                            send({
                                type: "ARROW_PREV",
                                key: "ArrowLeft"
                            });
                        },
                        ArrowRight () {
                            if (isVertical) return;
                            send({
                                type: "ARROW_NEXT",
                                key: "ArrowRight"
                            });
                        },
                        Home () {
                            send({
                                type: "HOME"
                            });
                        },
                        End () {
                            send({
                                type: "END"
                            });
                        },
                        Enter () {
                            send({
                                type: "ENTER"
                            });
                        }
                    };
                    let key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event, {
                        dir: prop("dir"),
                        orientation: prop("orientation")
                    });
                    const exec = keyMap[key];
                    if (exec) {
                        event.preventDefault();
                        exec(event);
                    }
                }
            });
        },
        getTriggerState,
        getTriggerProps (props2) {
            const { value, disabled } = props2;
            const triggerState = getTriggerState(props2);
            return normalize.button({
                ...parts.trigger.attrs,
                role: "tab",
                type: "button",
                disabled,
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "aria-disabled": disabled,
                "data-value": value,
                "aria-selected": triggerState.selected,
                "data-selected": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(triggerState.selected),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(triggerState.focused),
                "aria-controls": triggerState.selected ? getContentId(scope, value) : void 0,
                "data-ownedby": getListId(scope),
                "data-ssr": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(context.get("ssr")),
                id: getTriggerId(scope, value),
                tabIndex: triggerState.selected && composite ? 0 : -1,
                onFocus () {
                    send({
                        type: "TAB_FOCUS",
                        value
                    });
                },
                onBlur (event) {
                    const target = event.relatedTarget;
                    if (target?.getAttribute("role") !== "tab") {
                        send({
                            type: "TAB_BLUR"
                        });
                    }
                },
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (disabled) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSafari"])()) {
                        event.currentTarget.focus();
                    }
                    send({
                        type: "TAB_CLICK",
                        value
                    });
                }
            });
        },
        getContentProps (props2) {
            const { value } = props2;
            const selected = context.get("value") === value;
            return normalize.element({
                ...parts.content.attrs,
                dir: prop("dir"),
                id: getContentId(scope, value),
                tabIndex: composite ? 0 : -1,
                "aria-labelledby": getTriggerId(scope, value),
                role: "tabpanel",
                "data-ownedby": getListId(scope),
                "data-selected": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(selected),
                "data-orientation": prop("orientation"),
                hidden: !selected
            });
        },
        getIndicatorProps () {
            const indicatorRect = context.get("indicatorRect");
            const indicatorTransition = context.get("indicatorTransition");
            return normalize.element({
                id: getIndicatorId(scope),
                ...parts.indicator.attrs,
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                style: {
                    "--transition-property": "left, right, top, bottom, width, height",
                    "--left": indicatorRect.left,
                    "--top": indicatorRect.top,
                    "--width": indicatorRect.width,
                    "--height": indicatorRect.height,
                    position: "absolute",
                    willChange: "var(--transition-property)",
                    transitionProperty: "var(--transition-property)",
                    transitionDuration: indicatorTransition ? "var(--transition-duration, 150ms)" : "0ms",
                    transitionTimingFunction: "var(--transition-timing-function)",
                    [isHorizontal ? "left" : "top"]: isHorizontal ? "var(--left)" : "var(--top)"
                }
            });
        }
    };
}
var { not } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGuards"])();
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            dir: "ltr",
            orientation: "horizontal",
            activationMode: "automatic",
            loopFocus: true,
            composite: true,
            navigate (details) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clickIfLink"])(details.node);
            },
            defaultValue: null,
            ...props2
        };
    },
    initialState () {
        return "idle";
    },
    context ({ prop, bindable }) {
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    onChange (value) {
                        prop("onValueChange")?.({
                            value
                        });
                    }
                })),
            focusedValue: bindable(()=>({
                    defaultValue: prop("value") || prop("defaultValue"),
                    sync: true,
                    onChange (value) {
                        prop("onFocusChange")?.({
                            focusedValue: value
                        });
                    }
                })),
            ssr: bindable(()=>({
                    defaultValue: true
                })),
            indicatorTransition: bindable(()=>({
                    defaultValue: false
                })),
            indicatorRect: bindable(()=>({
                    defaultValue: {
                        left: "0px",
                        top: "0px",
                        width: "0px",
                        height: "0px"
                    }
                }))
        };
    },
    watch ({ context, prop, track, action }) {
        track([
            ()=>context.get("value")
        ], ()=>{
            action([
                "allowIndicatorTransition",
                "syncIndicatorRect",
                "syncTabIndex",
                "navigateIfNeeded"
            ]);
        });
        track([
            ()=>prop("dir"),
            ()=>prop("orientation")
        ], ()=>{
            action([
                "syncIndicatorRect"
            ]);
        });
    },
    on: {
        SET_VALUE: {
            actions: [
                "setValue"
            ]
        },
        CLEAR_VALUE: {
            actions: [
                "clearValue"
            ]
        },
        SET_INDICATOR_RECT: {
            actions: [
                "setIndicatorRect"
            ]
        },
        SYNC_TAB_INDEX: {
            actions: [
                "syncTabIndex"
            ]
        }
    },
    entry: [
        "syncIndicatorRect",
        "syncTabIndex",
        "syncSsr"
    ],
    exit: [
        "cleanupObserver"
    ],
    states: {
        idle: {
            on: {
                TAB_FOCUS: {
                    target: "focused",
                    actions: [
                        "setFocusedValue"
                    ]
                },
                TAB_CLICK: {
                    target: "focused",
                    actions: [
                        "setFocusedValue",
                        "setValue"
                    ]
                }
            }
        },
        focused: {
            on: {
                TAB_CLICK: {
                    target: "focused",
                    actions: [
                        "setFocusedValue",
                        "setValue"
                    ]
                },
                ARROW_PREV: [
                    {
                        guard: "selectOnFocus",
                        actions: [
                            "focusPrevTab",
                            "selectFocusedTab"
                        ]
                    },
                    {
                        actions: [
                            "focusPrevTab"
                        ]
                    }
                ],
                ARROW_NEXT: [
                    {
                        guard: "selectOnFocus",
                        actions: [
                            "focusNextTab",
                            "selectFocusedTab"
                        ]
                    },
                    {
                        actions: [
                            "focusNextTab"
                        ]
                    }
                ],
                HOME: [
                    {
                        guard: "selectOnFocus",
                        actions: [
                            "focusFirstTab",
                            "selectFocusedTab"
                        ]
                    },
                    {
                        actions: [
                            "focusFirstTab"
                        ]
                    }
                ],
                END: [
                    {
                        guard: "selectOnFocus",
                        actions: [
                            "focusLastTab",
                            "selectFocusedTab"
                        ]
                    },
                    {
                        actions: [
                            "focusLastTab"
                        ]
                    }
                ],
                ENTER: {
                    guard: not("selectOnFocus"),
                    actions: [
                        "selectFocusedTab"
                    ]
                },
                TAB_FOCUS: {
                    actions: [
                        "setFocusedValue"
                    ]
                },
                TAB_BLUR: {
                    target: "idle",
                    actions: [
                        "clearFocusedValue"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            selectOnFocus: ({ prop })=>prop("activationMode") === "automatic"
        },
        actions: {
            selectFocusedTab ({ context, prop }) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const focusedValue = context.get("focusedValue");
                    if (!focusedValue) return;
                    const nullable = prop("deselectable") && context.get("value") === focusedValue;
                    const value = nullable ? null : focusedValue;
                    context.set("value", value);
                });
            },
            setFocusedValue ({ context, event, flush }) {
                if (event.value == null) return;
                flush(()=>{
                    context.set("focusedValue", event.value);
                });
            },
            clearFocusedValue ({ context }) {
                context.set("focusedValue", null);
            },
            setValue ({ context, event, prop }) {
                const nullable = prop("deselectable") && context.get("value") === context.get("focusedValue");
                context.set("value", nullable ? null : event.value);
            },
            clearValue ({ context }) {
                context.set("value", null);
            },
            focusFirstTab ({ scope }) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    getFirstTriggerEl(scope)?.focus();
                });
            },
            focusLastTab ({ scope }) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    getLastTriggerEl(scope)?.focus();
                });
            },
            focusNextTab ({ context, prop, scope, event }) {
                const focusedValue = event.value ?? context.get("focusedValue");
                if (!focusedValue) return;
                const triggerEl = getNextTriggerEl(scope, {
                    value: focusedValue,
                    loopFocus: prop("loopFocus")
                });
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    if (prop("composite")) {
                        triggerEl?.focus();
                    } else if (triggerEl?.dataset.value != null) {
                        context.set("focusedValue", triggerEl.dataset.value);
                    }
                });
            },
            focusPrevTab ({ context, prop, scope, event }) {
                const focusedValue = event.value ?? context.get("focusedValue");
                if (!focusedValue) return;
                const triggerEl = getPrevTriggerEl(scope, {
                    value: focusedValue,
                    loopFocus: prop("loopFocus")
                });
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    if (prop("composite")) {
                        triggerEl?.focus();
                    } else if (triggerEl?.dataset.value != null) {
                        context.set("focusedValue", triggerEl.dataset.value);
                    }
                });
            },
            syncTabIndex ({ context, scope }) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const value = context.get("value");
                    if (!value) return;
                    const contentEl = getContentEl(scope, value);
                    if (!contentEl) return;
                    const focusables = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getFocusables"])(contentEl);
                    if (focusables.length > 0) {
                        contentEl.removeAttribute("tabindex");
                    } else {
                        contentEl.setAttribute("tabindex", "0");
                    }
                });
            },
            cleanupObserver ({ refs }) {
                const cleanup = refs.get("indicatorCleanup");
                if (cleanup) cleanup();
            },
            allowIndicatorTransition ({ context }) {
                context.set("indicatorTransition", true);
            },
            setIndicatorRect ({ context, event, scope }) {
                const value = event.id ?? context.get("value");
                const indicatorEl = getIndicatorEl(scope);
                if (!indicatorEl) return;
                if (!value) {
                    context.set("indicatorTransition", false);
                    return;
                }
                const triggerEl = getTriggerEl(scope, value);
                if (!triggerEl) return;
                context.set("indicatorRect", getRectById(scope, value));
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nextTick"])(()=>{
                    context.set("indicatorTransition", false);
                });
            },
            syncSsr ({ context }) {
                context.set("ssr", false);
            },
            syncIndicatorRect ({ context, refs, scope }) {
                const cleanup = refs.get("indicatorCleanup");
                if (cleanup) cleanup();
                const value = context.get("value");
                if (!value) {
                    context.set("indicatorTransition", false);
                    return;
                }
                const triggerEl = getTriggerEl(scope, value);
                const indicatorEl = getIndicatorEl(scope);
                if (!triggerEl || !indicatorEl) return;
                const indicatorCleanup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackElementRect"])([
                    triggerEl
                ], {
                    measure (el) {
                        return getOffsetRect(el);
                    },
                    onEntry ({ rects }) {
                        const [rect] = rects;
                        context.set("indicatorRect", resolveRect(rect));
                    }
                });
                refs.set("indicatorCleanup", indicatorCleanup);
            },
            navigateIfNeeded ({ context, prop, scope }) {
                const value = context.get("value");
                if (!value) return;
                const triggerEl = getTriggerEl(scope, value);
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAnchorElement"])(triggerEl)) {
                    prop("navigate")?.({
                        value,
                        node: triggerEl,
                        href: triggerEl.href
                    });
                }
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "activationMode",
    "composite",
    "deselectable",
    "dir",
    "getRootNode",
    "id",
    "ids",
    "loopFocus",
    "navigate",
    "onFocusChange",
    "onValueChange",
    "orientation",
    "translations",
    "value",
    "defaultValue"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var triggerProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "disabled",
    "value"
]);
var splitTriggerProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(triggerProps);
var contentProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "value"
]);
var splitContentProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(contentProps);
;
}}),
"[project]/node_modules/@zag-js/clipboard/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "anatomy": (()=>anatomy),
    "connect": (()=>connect),
    "contextProps": (()=>contextProps),
    "indicatorProps": (()=>indicatorProps),
    "machine": (()=>machine),
    "props": (()=>props),
    "splitIndicatorProps": (()=>splitIndicatorProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/clipboard.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("clipboard").parts("root", "control", "trigger", "indicator", "input", "label");
var parts = anatomy.build();
var getRootId = (ctx)=>ctx.ids?.root ?? `clip:${ctx.id}`;
var getInputId = (ctx)=>ctx.ids?.input ?? `clip:${ctx.id}:input`;
var getLabelId = (ctx)=>ctx.ids?.label ?? `clip:${ctx.id}:label`;
var getInputEl = (ctx)=>ctx.getById(getInputId(ctx));
var writeToClipboard = (ctx, value)=>copyText(ctx.getDoc(), value);
function createNode(doc, text) {
    const node = doc.createElement("pre");
    Object.assign(node.style, {
        width: "1px",
        height: "1px",
        position: "fixed",
        top: "5px"
    });
    node.textContent = text;
    return node;
}
function copyNode(node) {
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(node);
    const selection = win.getSelection();
    if (selection == null) {
        return Promise.reject(new Error());
    }
    selection.removeAllRanges();
    const doc = node.ownerDocument;
    const range = doc.createRange();
    range.selectNodeContents(node);
    selection.addRange(range);
    doc.execCommand("copy");
    selection.removeAllRanges();
    return Promise.resolve();
}
function copyText(doc, text) {
    const win = doc.defaultView || window;
    if (win.navigator.clipboard?.writeText !== void 0) {
        return win.navigator.clipboard.writeText(text);
    }
    if (!doc.body) {
        return Promise.reject(new Error());
    }
    const node = createNode(doc, text);
    doc.body.appendChild(node);
    copyNode(node);
    doc.body.removeChild(node);
    return Promise.resolve();
}
// src/clipboard.connect.ts
function connect(service, normalize) {
    const { state, send, context, scope } = service;
    const copied = state.matches("copied");
    return {
        copied,
        value: context.get("value"),
        setValue (value) {
            send({
                type: "VALUE.SET",
                value
            });
        },
        copy () {
            send({
                type: "COPY"
            });
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied),
                id: getRootId(scope)
            });
        },
        getLabelProps () {
            return normalize.label({
                ...parts.label.attrs,
                htmlFor: getInputId(scope),
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied),
                id: getLabelId(scope)
            });
        },
        getControlProps () {
            return normalize.element({
                ...parts.control.attrs,
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied)
            });
        },
        getInputProps () {
            return normalize.input({
                ...parts.input.attrs,
                defaultValue: context.get("value"),
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied),
                readOnly: true,
                "data-readonly": "true",
                id: getInputId(scope),
                onFocus (event) {
                    event.currentTarget.select();
                },
                onCopy () {
                    send({
                        type: "INPUT.COPY"
                    });
                }
            });
        },
        getTriggerProps () {
            return normalize.button({
                ...parts.trigger.attrs,
                type: "button",
                "aria-label": copied ? "Copied to clipboard" : "Copy to clipboard",
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied),
                onClick () {
                    send({
                        type: "COPY"
                    });
                }
            });
        },
        getIndicatorProps (props2) {
            return normalize.element({
                ...parts.indicator.attrs,
                hidden: props2.copied !== copied
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            timeout: 3e3,
            defaultValue: "",
            ...props2
        };
    },
    initialState () {
        return "idle";
    },
    context ({ prop, bindable }) {
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    onChange (value) {
                        prop("onValueChange")?.({
                            value
                        });
                    }
                }))
        };
    },
    watch ({ track, context, action }) {
        track([
            ()=>context.get("value")
        ], ()=>{
            action([
                "syncInputElement"
            ]);
        });
    },
    on: {
        "VALUE.SET": {
            actions: [
                "setValue"
            ]
        },
        COPY: {
            target: "copied",
            actions: [
                "copyToClipboard",
                "invokeOnCopy"
            ]
        }
    },
    states: {
        idle: {
            on: {
                "INPUT.COPY": {
                    target: "copied",
                    actions: [
                        "invokeOnCopy"
                    ]
                }
            }
        },
        copied: {
            effects: [
                "waitForTimeout"
            ],
            on: {
                "COPY.DONE": {
                    target: "idle"
                },
                COPY: {
                    target: "copied",
                    actions: [
                        "copyToClipboard",
                        "invokeOnCopy"
                    ]
                },
                "INPUT.COPY": {
                    actions: [
                        "invokeOnCopy"
                    ]
                }
            }
        }
    },
    implementations: {
        effects: {
            waitForTimeout ({ prop, send }) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setRafTimeout"])(()=>{
                    send({
                        type: "COPY.DONE"
                    });
                }, prop("timeout"));
            }
        },
        actions: {
            setValue ({ context, event }) {
                context.set("value", event.value);
            },
            copyToClipboard ({ context, scope }) {
                writeToClipboard(scope, context.get("value"));
            },
            invokeOnCopy ({ prop }) {
                prop("onStatusChange")?.({
                    copied: true
                });
            },
            syncInputElement ({ context, scope }) {
                const inputEl = getInputEl(scope);
                if (!inputEl) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setElementValue"])(inputEl, context.get("value"));
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "getRootNode",
    "id",
    "ids",
    "value",
    "defaultValue",
    "timeout",
    "onStatusChange",
    "onValueChange"
]);
var contextProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var indicatorProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "copied"
]);
var splitIndicatorProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(indicatorProps);
;
}}),
"[project]/node_modules/@zag-js/color-picker/dist/index.mjs [app-client] (ecmascript) <export parse as parseColor>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "parseColor": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$picker$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parse"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$color$2d$picker$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/color-picker/dist/index.mjs [app-client] (ecmascript)");
}}),
"[project]/node_modules/@zag-js/highlight-word/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// src/normalize-span.ts
__turbopack_context__.s({
    "highlightWord": (()=>highlightWord)
});
var normalizeSpan = (spans, len)=>{
    const result = [];
    const append = (start, end, match)=>{
        if (end - start > 0) result.push({
            start,
            end,
            match
        });
    };
    if (spans.length === 0) {
        append(0, len, false);
    } else {
        let lastIndex = 0;
        for (const chunk of spans){
            append(lastIndex, chunk.start, false);
            append(chunk.start, chunk.end, true);
            lastIndex = chunk.end;
        }
        append(lastIndex, len, false);
    }
    return result;
};
// src/highlight-first.ts
function highlightFirst(props) {
    const { text, query, ignoreCase } = props;
    const searchText = ignoreCase ? text.toLowerCase() : text;
    const searchQuery = ignoreCase ? typeof query === "string" ? query.toLowerCase() : query : query;
    const start = typeof searchText === "string" ? searchText.indexOf(searchQuery) : -1;
    if (start === -1) {
        return [
            {
                text,
                match: false
            }
        ];
    }
    const end = start + searchQuery.length;
    const spans = [
        {
            start,
            end
        }
    ];
    return normalizeSpan(spans, text.length).map((chunk)=>({
            text: text.slice(chunk.start, chunk.end),
            match: !!chunk.match
        }));
}
// src/highlight-multiple.ts
var escapeRegexp = (term)=>term.replace(/[|\\{}()[\]^$+*?.-]/g, (char)=>`\\${char}`);
var buildRegex = (queryProp, flags)=>{
    const query = queryProp.filter(Boolean).map((text)=>escapeRegexp(text));
    return new RegExp(`(${query.join("|")})`, flags);
};
var getRegexFlags = (ignoreCase, matchAll = true)=>`${ignoreCase ? "i" : ""}${matchAll ? "g" : ""}`;
function highlightMultiple(props) {
    const { text, query, ignoreCase, matchAll } = props;
    if (query.length === 0) {
        return [
            {
                text,
                match: false
            }
        ];
    }
    const flags = getRegexFlags(ignoreCase, matchAll);
    const regex = buildRegex(Array.isArray(query) ? query : [
        query
    ], flags);
    const spans = [
        ...text.matchAll(regex)
    ].map((match)=>({
            start: match.index || 0,
            end: (match.index || 0) + match[0].length
        }));
    return normalizeSpan(spans, props.text.length).map((chunk)=>({
            text: props.text.slice(chunk.start, chunk.end),
            match: !!chunk.match
        }));
}
// src/highlight.ts
var highlightWord = (props)=>{
    if (props.matchAll == null) {
        props.matchAll = Array.isArray(props.query);
    }
    if (!props.matchAll && Array.isArray(props.query)) {
        throw new Error("matchAll must be true when using multiple queries");
    }
    return props.matchAll ? highlightMultiple(props) : highlightFirst(props);
};
;
}}),
"[project]/node_modules/@zag-js/pagination/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "anatomy": (()=>anatomy),
    "connect": (()=>connect),
    "ellipsisProps": (()=>ellipsisProps),
    "itemProps": (()=>itemProps),
    "machine": (()=>machine),
    "props": (()=>props),
    "splitEllipsisProps": (()=>splitEllipsisProps),
    "splitItemProps": (()=>splitItemProps),
    "splitProps": (()=>splitProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/pagination.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("pagination").parts("root", "item", "ellipsis", "prevTrigger", "nextTrigger");
var parts = anatomy.build();
// src/pagination.dom.ts
var getRootId = (ctx)=>ctx.ids?.root ?? `pagination:${ctx.id}`;
var getPrevTriggerId = (ctx)=>ctx.ids?.prevTrigger ?? `pagination:${ctx.id}:prev`;
var getNextTriggerId = (ctx)=>ctx.ids?.nextTrigger ?? `pagination:${ctx.id}:next`;
var getEllipsisId = (ctx, index)=>ctx.ids?.ellipsis?.(index) ?? `pagination:${ctx.id}:ellipsis:${index}`;
var getItemId = (ctx, page)=>ctx.ids?.item?.(page) ?? `pagination:${ctx.id}:item:${page}`;
// src/pagination.utils.ts
var range = (start, end)=>{
    let length = end - start + 1;
    return Array.from({
        length
    }, (_, idx)=>idx + start);
};
var transform = (items)=>{
    return items.map((value)=>{
        if (typeof value === "number") return {
            type: "page",
            value
        };
        return {
            type: "ellipsis"
        };
    });
};
var ELLIPSIS = "ellipsis";
var getRange = (ctx)=>{
    const { page, totalPages, siblingCount } = ctx;
    const totalPageNumbers = Math.min(2 * siblingCount + 5, totalPages);
    const firstPageIndex = 1;
    const lastPageIndex = totalPages;
    const leftSiblingIndex = Math.max(page - siblingCount, firstPageIndex);
    const rightSiblingIndex = Math.min(page + siblingCount, lastPageIndex);
    const showLeftEllipsis = leftSiblingIndex > firstPageIndex + 1;
    const showRightEllipsis = rightSiblingIndex < lastPageIndex - 1;
    const itemCount = totalPageNumbers - 2;
    if (!showLeftEllipsis && showRightEllipsis) {
        const leftRange = range(1, itemCount);
        return [
            ...leftRange,
            ELLIPSIS,
            lastPageIndex
        ];
    }
    if (showLeftEllipsis && !showRightEllipsis) {
        const rightRange = range(lastPageIndex - itemCount + 1, lastPageIndex);
        return [
            firstPageIndex,
            ELLIPSIS,
            ...rightRange
        ];
    }
    if (showLeftEllipsis && showRightEllipsis) {
        const middleRange = range(leftSiblingIndex, rightSiblingIndex);
        return [
            firstPageIndex,
            ELLIPSIS,
            ...middleRange,
            ELLIPSIS,
            lastPageIndex
        ];
    }
    const fullRange = range(firstPageIndex, lastPageIndex);
    return fullRange;
};
var getTransformedRange = (ctx)=>transform(getRange(ctx));
// src/pagination.connect.ts
function connect(service, normalize) {
    const { send, scope, prop, computed, context } = service;
    const totalPages = computed("totalPages");
    const page = context.get("page");
    const translations = prop("translations");
    const count = prop("count");
    const previousPage = computed("previousPage");
    const nextPage = computed("nextPage");
    const pageRange = computed("pageRange");
    const type = prop("type");
    const isButton = type === "button";
    const isFirstPage = page === 1;
    const isLastPage = page === totalPages;
    const pages = getTransformedRange({
        page,
        totalPages,
        siblingCount: prop("siblingCount")
    });
    return {
        count,
        page,
        pageSize: context.get("pageSize"),
        totalPages,
        pages,
        previousPage,
        nextPage,
        pageRange,
        slice (data) {
            return data.slice(pageRange.start, pageRange.end);
        },
        setPageSize (size) {
            send({
                type: "SET_PAGE_SIZE",
                size
            });
        },
        setPage (page2) {
            send({
                type: "SET_PAGE",
                page: page2
            });
        },
        goToNextPage () {
            send({
                type: "NEXT_PAGE"
            });
        },
        goToPrevPage () {
            send({
                type: "PREVIOUS_PAGE"
            });
        },
        goToFirstPage () {
            send({
                type: "FIRST_PAGE"
            });
        },
        goToLastPage () {
            send({
                type: "LAST_PAGE"
            });
        },
        getRootProps () {
            return normalize.element({
                id: getRootId(scope),
                ...parts.root.attrs,
                dir: prop("dir"),
                "aria-label": translations.rootLabel
            });
        },
        getEllipsisProps (props2) {
            return normalize.element({
                id: getEllipsisId(scope, props2.index),
                ...parts.ellipsis.attrs,
                dir: prop("dir")
            });
        },
        getItemProps (props2) {
            const index = props2.value;
            const isCurrentPage = index === page;
            return normalize.element({
                id: getItemId(scope, index),
                ...parts.item.attrs,
                dir: prop("dir"),
                "data-index": index,
                "data-selected": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(isCurrentPage),
                "aria-current": isCurrentPage ? "page" : void 0,
                "aria-label": translations.itemLabel?.({
                    page: index,
                    totalPages
                }),
                onClick () {
                    send({
                        type: "SET_PAGE",
                        page: index
                    });
                },
                ...isButton && {
                    type: "button"
                }
            });
        },
        getPrevTriggerProps () {
            return normalize.element({
                id: getPrevTriggerId(scope),
                ...parts.prevTrigger.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(isFirstPage),
                "aria-label": translations.prevTriggerLabel,
                onClick () {
                    send({
                        type: "PREVIOUS_PAGE"
                    });
                },
                ...isButton && {
                    disabled: isFirstPage,
                    type: "button"
                }
            });
        },
        getNextTriggerProps () {
            return normalize.element({
                id: getNextTriggerId(scope),
                ...parts.nextTrigger.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(isLastPage),
                "aria-label": translations.nextTriggerLabel,
                onClick () {
                    send({
                        type: "NEXT_PAGE"
                    });
                },
                ...isButton && {
                    disabled: isLastPage,
                    type: "button"
                }
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            defaultPageSize: 10,
            siblingCount: 1,
            defaultPage: 1,
            type: "button",
            count: 1,
            ...props2,
            translations: {
                rootLabel: "pagination",
                prevTriggerLabel: "previous page",
                nextTriggerLabel: "next page",
                itemLabel ({ page, totalPages }) {
                    const isLastPage = totalPages > 1 && page === totalPages;
                    return `${isLastPage ? "last page, " : ""}page ${page}`;
                },
                ...props2.translations
            }
        };
    },
    initialState () {
        return "idle";
    },
    context ({ prop, bindable, getContext }) {
        return {
            page: bindable(()=>({
                    value: prop("page"),
                    defaultValue: prop("defaultPage"),
                    onChange (value) {
                        const context = getContext();
                        prop("onPageChange")?.({
                            page: value,
                            pageSize: context.get("pageSize")
                        });
                    }
                })),
            pageSize: bindable(()=>({
                    value: prop("pageSize"),
                    defaultValue: prop("defaultPageSize"),
                    onChange (value) {
                        prop("onPageSizeChange")?.({
                            pageSize: value
                        });
                    }
                }))
        };
    },
    watch ({ track, context, action }) {
        track([
            ()=>context.get("pageSize")
        ], ()=>{
            action([
                "setPageIfNeeded"
            ]);
        });
    },
    computed: {
        totalPages: ({ context, prop })=>Math.ceil(prop("count") / context.get("pageSize")),
        previousPage: ({ context })=>context.get("page") === 1 ? null : context.get("page") - 1,
        nextPage: ({ context, computed })=>context.get("page") === computed("totalPages") ? null : context.get("page") + 1,
        pageRange: ({ context, prop })=>{
            const start = (context.get("page") - 1) * context.get("pageSize");
            const end = Math.min(start + context.get("pageSize"), prop("count"));
            return {
                start,
                end
            };
        },
        isValidPage: ({ context, computed })=>context.get("page") >= 1 && context.get("page") <= computed("totalPages")
    },
    on: {
        SET_PAGE: {
            guard: "isValidPage",
            actions: [
                "setPage"
            ]
        },
        SET_PAGE_SIZE: {
            actions: [
                "setPageSize"
            ]
        },
        FIRST_PAGE: {
            actions: [
                "goToFirstPage"
            ]
        },
        LAST_PAGE: {
            actions: [
                "goToLastPage"
            ]
        },
        PREVIOUS_PAGE: {
            guard: "canGoToPrevPage",
            actions: [
                "goToPrevPage"
            ]
        },
        NEXT_PAGE: {
            guard: "canGoToNextPage",
            actions: [
                "goToNextPage"
            ]
        }
    },
    states: {
        idle: {}
    },
    implementations: {
        guards: {
            isValidPage: ({ event, computed })=>event.page >= 1 && event.page <= computed("totalPages"),
            isValidCount: ({ context, event })=>context.get("page") > event.count,
            canGoToNextPage: ({ context, computed })=>context.get("page") < computed("totalPages"),
            canGoToPrevPage: ({ context })=>context.get("page") > 1
        },
        actions: {
            setPage ({ context, event, computed }) {
                const page = clampPage(event.page, computed("totalPages"));
                context.set("page", page);
            },
            setPageSize ({ context, event }) {
                context.set("pageSize", event.size);
            },
            goToFirstPage ({ context }) {
                context.set("page", 1);
            },
            goToLastPage ({ context, computed }) {
                context.set("page", computed("totalPages"));
            },
            goToPrevPage ({ context, computed }) {
                context.set("page", (prev)=>clampPage(prev - 1, computed("totalPages")));
            },
            goToNextPage ({ context, computed }) {
                context.set("page", (prev)=>clampPage(prev + 1, computed("totalPages")));
            },
            setPageIfNeeded ({ context, computed }) {
                if (computed("isValidPage")) return;
                context.set("page", 1);
            }
        }
    }
});
var clampPage = (page, totalPages)=>Math.min(Math.max(page, 1), totalPages);
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "count",
    "dir",
    "getRootNode",
    "id",
    "ids",
    "onPageChange",
    "onPageSizeChange",
    "page",
    "defaultPage",
    "pageSize",
    "defaultPageSize",
    "siblingCount",
    "translations",
    "type"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var itemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "value",
    "type"
]);
var splitItemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemProps);
var ellipsisProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "index"
]);
var splitEllipsisProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(ellipsisProps);
;
}}),
"[project]/node_modules/@zag-js/steps/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "anatomy": (()=>anatomy),
    "connect": (()=>connect),
    "machine": (()=>machine),
    "props": (()=>props),
    "splitProps": (()=>splitProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/steps.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("steps").parts("root", "list", "item", "trigger", "indicator", "separator", "content", "nextTrigger", "prevTrigger", "progress");
var parts = anatomy.build();
// src/steps.dom.ts
var getRootId = (ctx)=>ctx.ids?.root ?? `steps:${ctx.id}`;
var getListId = (ctx)=>ctx.ids?.list ?? `steps:${ctx.id}:list`;
var getTriggerId = (ctx, index)=>ctx.ids?.triggerId?.(index) ?? `steps:${ctx.id}:trigger:${index}`;
var getContentId = (ctx, index)=>ctx.ids?.contentId?.(index) ?? `steps:${ctx.id}:content:${index}`;
// src/steps.connect.ts
function connect(service, normalize) {
    const { context, send, computed, prop, scope } = service;
    const step = context.get("step");
    const count = prop("count");
    const percent = computed("percent");
    const hasNextStep = computed("hasNextStep");
    const hasPrevStep = computed("hasPrevStep");
    const getItemState = (props2)=>({
            triggerId: getTriggerId(scope, props2.index),
            contentId: getContentId(scope, props2.index),
            current: props2.index === step,
            completed: props2.index < step,
            incomplete: props2.index > step,
            index: props2.index,
            first: props2.index === 0,
            last: props2.index === count - 1
        });
    const goToNextStep = ()=>{
        send({
            type: "STEP.NEXT",
            src: "next.trigger.click"
        });
    };
    const goToPrevStep = ()=>{
        send({
            type: "STEP.PREV",
            src: "prev.trigger.click"
        });
    };
    const resetStep = ()=>{
        send({
            type: "STEP.RESET",
            src: "reset.trigger.click"
        });
    };
    const setStep = (value)=>{
        send({
            type: "STEP.SET",
            value,
            src: "api.setValue"
        });
    };
    return {
        value: step,
        count,
        percent,
        hasNextStep,
        hasPrevStep,
        isCompleted: computed("completed"),
        goToNextStep,
        goToPrevStep,
        resetStep,
        getItemState,
        setStep,
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                id: getRootId(scope),
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                style: {
                    "--percent": `${percent}%`
                }
            });
        },
        getListProps () {
            const arr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromLength"])(count);
            const triggerIds = arr.map((_, index)=>getTriggerId(scope, index));
            return normalize.element({
                ...parts.list.attrs,
                dir: prop("dir"),
                id: getListId(scope),
                role: "tablist",
                "aria-owns": triggerIds.join(" "),
                "aria-orientation": prop("orientation"),
                "data-orientation": prop("orientation")
            });
        },
        getItemProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.item.attrs,
                dir: prop("dir"),
                "aria-current": itemState.current ? "step" : void 0,
                "data-orientation": prop("orientation")
            });
        },
        getTriggerProps (props2) {
            const itemState = getItemState(props2);
            return normalize.button({
                ...parts.trigger.attrs,
                id: itemState.triggerId,
                role: "tab",
                dir: prop("dir"),
                tabIndex: !prop("linear") || itemState.current ? 0 : -1,
                "aria-selected": itemState.current,
                "aria-controls": itemState.contentId,
                "data-state": itemState.current ? "open" : "closed",
                "data-orientation": prop("orientation"),
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.completed),
                "data-current": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.current),
                "data-incomplete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.incomplete),
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (prop("linear")) return;
                    send({
                        type: "STEP.SET",
                        value: props2.index,
                        src: "trigger.click"
                    });
                }
            });
        },
        getContentProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.content.attrs,
                dir: prop("dir"),
                id: itemState.contentId,
                role: "tabpanel",
                tabIndex: 0,
                hidden: !itemState.current,
                "data-state": itemState.current ? "open" : "closed",
                "data-orientation": prop("orientation"),
                "aria-labelledby": itemState.triggerId
            });
        },
        getIndicatorProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.indicator.attrs,
                dir: prop("dir"),
                "aria-hidden": true,
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.completed),
                "data-current": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.current),
                "data-incomplete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.incomplete)
            });
        },
        getSeparatorProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.separator.attrs,
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.completed),
                "data-current": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.current),
                "data-incomplete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.incomplete)
            });
        },
        getNextTriggerProps () {
            return normalize.button({
                ...parts.nextTrigger.attrs,
                dir: prop("dir"),
                type: "button",
                disabled: !hasNextStep,
                onClick (event) {
                    if (event.defaultPrevented) return;
                    goToNextStep();
                }
            });
        },
        getPrevTriggerProps () {
            return normalize.button({
                dir: prop("dir"),
                ...parts.prevTrigger.attrs,
                type: "button",
                disabled: !hasPrevStep,
                onClick (event) {
                    if (event.defaultPrevented) return;
                    goToPrevStep();
                }
            });
        },
        getProgressProps () {
            return normalize.element({
                dir: prop("dir"),
                ...parts.progress.attrs,
                role: "progressbar",
                "aria-valuenow": percent,
                "aria-valuemin": 0,
                "aria-valuemax": 100,
                "aria-valuetext": `${percent}% complete`,
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(percent === 100)
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            defaultStep: 0,
            count: 1,
            linear: false,
            orientation: "horizontal",
            ...props2
        };
    },
    context ({ prop, bindable }) {
        return {
            step: bindable(()=>({
                    defaultValue: prop("defaultStep"),
                    value: prop("step"),
                    onChange (value) {
                        prop("onStepChange")?.({
                            step: value
                        });
                        const completed = value == prop("count");
                        if (completed) prop("onStepComplete")?.();
                    }
                }))
        };
    },
    computed: {
        percent: ({ context, prop })=>context.get("step") / prop("count") * 100,
        hasNextStep: ({ context, prop })=>context.get("step") < prop("count"),
        hasPrevStep: ({ context })=>context.get("step") > 0,
        completed: ({ context, prop })=>context.get("step") === prop("count")
    },
    initialState () {
        return "idle";
    },
    entry: [
        "validateStep"
    ],
    states: {
        idle: {
            on: {
                "STEP.SET": {
                    actions: [
                        "setStep"
                    ]
                },
                "STEP.NEXT": {
                    actions: [
                        "goToNextStep"
                    ]
                },
                "STEP.PREV": {
                    actions: [
                        "goToPrevStep"
                    ]
                },
                "STEP.RESET": {
                    actions: [
                        "resetStep"
                    ]
                }
            }
        }
    },
    implementations: {
        actions: {
            goToNextStep ({ context, prop }) {
                const value = Math.min(context.get("step") + 1, prop("count"));
                context.set("step", value);
            },
            goToPrevStep ({ context }) {
                const value = Math.max(context.get("step") - 1, 0);
                context.set("step", value);
            },
            resetStep ({ context }) {
                context.set("step", 0);
            },
            setStep ({ context, event }) {
                context.set("step", event.value);
            },
            validateStep ({ context, prop }) {
                validateStep(prop("count"), context.get("step"));
            }
        }
    }
});
var validateStep = (count, step)=>{
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValueWithinRange"])(step, 0, count)) {
        throw new RangeError(`[zag-js/steps] step index ${step} is out of bounds`);
    }
};
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "count",
    "dir",
    "getRootNode",
    "id",
    "ids",
    "linear",
    "onStepChange",
    "onStepComplete",
    "orientation",
    "step",
    "defaultStep"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}}),
"[project]/node_modules/@zag-js/toggle/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "anatomy": (()=>anatomy),
    "connect": (()=>connect),
    "machine": (()=>machine),
    "props": (()=>props),
    "splitProps": (()=>splitProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/toggle.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("toggle", [
    "root",
    "indicator"
]);
var parts = anatomy.build();
function connect(service, normalize) {
    const { context, prop, send } = service;
    const pressed = context.get("pressed");
    return {
        pressed,
        disabled: !!prop("disabled"),
        setPressed (value) {
            send({
                type: "PRESS.SET",
                value
            });
        },
        getRootProps () {
            return normalize.element({
                type: "button",
                ...parts.root.attrs,
                disabled: prop("disabled"),
                "aria-pressed": pressed,
                "data-state": pressed ? "on" : "off",
                "data-pressed": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(pressed),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("disabled")),
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (prop("disabled")) return;
                    send({
                        type: "PRESS.TOGGLE"
                    });
                }
            });
        },
        getIndicatorProps () {
            return normalize.element({
                ...parts.indicator.attrs,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("disabled")),
                "data-pressed": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(pressed),
                "data-state": pressed ? "on" : "off"
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            defaultPressed: false,
            ...props2
        };
    },
    context ({ prop, bindable }) {
        return {
            pressed: bindable(()=>({
                    value: prop("pressed"),
                    defaultValue: prop("defaultPressed"),
                    onChange (value) {
                        prop("onPressedChange")?.(value);
                    }
                }))
        };
    },
    initialState () {
        return "idle";
    },
    on: {
        "PRESS.TOGGLE": {
            actions: [
                "togglePressed"
            ]
        },
        "PRESS.SET": {
            actions: [
                "setPressed"
            ]
        }
    },
    states: {
        idle: {}
    },
    implementations: {
        actions: {
            togglePressed ({ context }) {
                context.set("pressed", !context.get("pressed"));
            },
            setPressed ({ context, event }) {
                context.set("pressed", event.value);
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "defaultPressed",
    "pressed",
    "onPressedChange",
    "disabled"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}}),
"[project]/node_modules/enquire.js/src/QueryHandler.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * Delegate to handle a media query being matched and unmatched.
 *
 * @param {object} options
 * @param {function} options.match callback for when the media query is matched
 * @param {function} [options.unmatch] callback for when the media query is unmatched
 * @param {function} [options.setup] one-time callback triggered the first time a query is matched
 * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?
 * @constructor
 */ function QueryHandler(options) {
    this.options = options;
    !options.deferSetup && this.setup();
}
QueryHandler.prototype = {
    constructor: QueryHandler,
    /**
     * coordinates setup of the handler
     *
     * @function
     */ setup: function() {
        if (this.options.setup) {
            this.options.setup();
        }
        this.initialised = true;
    },
    /**
     * coordinates setup and triggering of the handler
     *
     * @function
     */ on: function() {
        !this.initialised && this.setup();
        this.options.match && this.options.match();
    },
    /**
     * coordinates the unmatch event for the handler
     *
     * @function
     */ off: function() {
        this.options.unmatch && this.options.unmatch();
    },
    /**
     * called when a handler is to be destroyed.
     * delegates to the destroy or unmatch callbacks, depending on availability.
     *
     * @function
     */ destroy: function() {
        this.options.destroy ? this.options.destroy() : this.off();
    },
    /**
     * determines equality by reference.
     * if object is supplied compare options, if function, compare match callback
     *
     * @function
     * @param {object || function} [target] the target for comparison
     */ equals: function(target) {
        return this.options === target || this.options.match === target;
    }
};
module.exports = QueryHandler;
}}),
"[project]/node_modules/enquire.js/src/Util.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * Helper function for iterating over a collection
 *
 * @param collection
 * @param fn
 */ function each(collection, fn) {
    var i = 0, length = collection.length, cont;
    for(i; i < length; i++){
        cont = fn(collection[i], i);
        if (cont === false) {
            break; //allow early exit
        }
    }
}
/**
 * Helper function for determining whether target object is an array
 *
 * @param target the object under test
 * @return {Boolean} true if array, false otherwise
 */ function isArray(target) {
    return Object.prototype.toString.apply(target) === '[object Array]';
}
/**
 * Helper function for determining whether target object is a function
 *
 * @param target the object under test
 * @return {Boolean} true if function, false otherwise
 */ function isFunction(target) {
    return typeof target === 'function';
}
module.exports = {
    isFunction: isFunction,
    isArray: isArray,
    each: each
};
}}),
"[project]/node_modules/enquire.js/src/MediaQuery.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var QueryHandler = __turbopack_context__.r("[project]/node_modules/enquire.js/src/QueryHandler.js [app-client] (ecmascript)");
var each = __turbopack_context__.r("[project]/node_modules/enquire.js/src/Util.js [app-client] (ecmascript)").each;
/**
 * Represents a single media query, manages it's state and registered handlers for this query
 *
 * @constructor
 * @param {string} query the media query string
 * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design
 */ function MediaQuery(query, isUnconditional) {
    this.query = query;
    this.isUnconditional = isUnconditional;
    this.handlers = [];
    this.mql = window.matchMedia(query);
    var self = this;
    this.listener = function(mql) {
        // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly
        self.mql = mql.currentTarget || mql;
        self.assess();
    };
    this.mql.addListener(this.listener);
}
MediaQuery.prototype = {
    constuctor: MediaQuery,
    /**
     * add a handler for this query, triggering if already active
     *
     * @param {object} handler
     * @param {function} handler.match callback for when query is activated
     * @param {function} [handler.unmatch] callback for when query is deactivated
     * @param {function} [handler.setup] callback for immediate execution when a query handler is registered
     * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?
     */ addHandler: function(handler) {
        var qh = new QueryHandler(handler);
        this.handlers.push(qh);
        this.matches() && qh.on();
    },
    /**
     * removes the given handler from the collection, and calls it's destroy methods
     *
     * @param {object || function} handler the handler to remove
     */ removeHandler: function(handler) {
        var handlers = this.handlers;
        each(handlers, function(h, i) {
            if (h.equals(handler)) {
                h.destroy();
                return !handlers.splice(i, 1); //remove from array and exit each early
            }
        });
    },
    /**
     * Determine whether the media query should be considered a match
     *
     * @return {Boolean} true if media query can be considered a match, false otherwise
     */ matches: function() {
        return this.mql.matches || this.isUnconditional;
    },
    /**
     * Clears all handlers and unbinds events
     */ clear: function() {
        each(this.handlers, function(handler) {
            handler.destroy();
        });
        this.mql.removeListener(this.listener);
        this.handlers.length = 0; //clear array
    },
    /*
        * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match
        */ assess: function() {
        var action = this.matches() ? 'on' : 'off';
        each(this.handlers, function(handler) {
            handler[action]();
        });
    }
};
module.exports = MediaQuery;
}}),
"[project]/node_modules/enquire.js/src/MediaQueryDispatch.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var MediaQuery = __turbopack_context__.r("[project]/node_modules/enquire.js/src/MediaQuery.js [app-client] (ecmascript)");
var Util = __turbopack_context__.r("[project]/node_modules/enquire.js/src/Util.js [app-client] (ecmascript)");
var each = Util.each;
var isFunction = Util.isFunction;
var isArray = Util.isArray;
/**
 * Allows for registration of query handlers.
 * Manages the query handler's state and is responsible for wiring up browser events
 *
 * @constructor
 */ function MediaQueryDispatch() {
    if (!window.matchMedia) {
        throw new Error('matchMedia not present, legacy browsers require a polyfill');
    }
    this.queries = {};
    this.browserIsIncapable = !window.matchMedia('only all').matches;
}
MediaQueryDispatch.prototype = {
    constructor: MediaQueryDispatch,
    /**
     * Registers a handler for the given media query
     *
     * @param {string} q the media query
     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers
     * @param {function} options.match fired when query matched
     * @param {function} [options.unmatch] fired when a query is no longer matched
     * @param {function} [options.setup] fired when handler first triggered
     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched
     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers
     */ register: function(q, options, shouldDegrade) {
        var queries = this.queries, isUnconditional = shouldDegrade && this.browserIsIncapable;
        if (!queries[q]) {
            queries[q] = new MediaQuery(q, isUnconditional);
        }
        //normalise to object in an array
        if (isFunction(options)) {
            options = {
                match: options
            };
        }
        if (!isArray(options)) {
            options = [
                options
            ];
        }
        each(options, function(handler) {
            if (isFunction(handler)) {
                handler = {
                    match: handler
                };
            }
            queries[q].addHandler(handler);
        });
        return this;
    },
    /**
     * unregisters a query and all it's handlers, or a specific handler for a query
     *
     * @param {string} q the media query to target
     * @param {object || function} [handler] specific handler to unregister
     */ unregister: function(q, handler) {
        var query = this.queries[q];
        if (query) {
            if (handler) {
                query.removeHandler(handler);
            } else {
                query.clear();
                delete this.queries[q];
            }
        }
        return this;
    }
};
module.exports = MediaQueryDispatch;
}}),
"[project]/node_modules/enquire.js/src/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var MediaQueryDispatch = __turbopack_context__.r("[project]/node_modules/enquire.js/src/MediaQueryDispatch.js [app-client] (ecmascript)");
module.exports = new MediaQueryDispatch();
}}),
"[project]/node_modules/lodash.debounce/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as the `TypeError` message for "Functions" methods. */ var FUNC_ERROR_TEXT = 'Expected a function';
/** Used as references for various `Number` constants. */ var NAN = 0 / 0;
/** `Object#toString` result references. */ var symbolTag = '[object Symbol]';
/** Used to match leading and trailing whitespace. */ var reTrim = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */ var freeParseInt = parseInt;
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max, nativeMin = Math.min;
/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */ var now = function() {
    return root.Date.now();
};
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */ function debounce(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
    }
    function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result = wait - timeSinceLastCall;
        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
    }
    function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
            return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
        timerId = undefined;
        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
            return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
    }
    function cancel() {
        if (timerId !== undefined) {
            clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
        return timerId === undefined ? result : trailingEdge(now());
    }
    function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
            if (timerId === undefined) {
                return leadingEdge(lastCallTime);
            }
            if (maxing) {
                // Handle invocations in a tight loop.
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
            }
        }
        if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
        }
        return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */ function toNumber(value) {
    if (typeof value == 'number') {
        return value;
    }
    if (isSymbol(value)) {
        return NAN;
    }
    if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? other + '' : other;
    }
    if (typeof value != 'string') {
        return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
module.exports = debounce;
}}),
"[project]/node_modules/classnames/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/ /* global define */ (function() {
    'use strict';
    var hasOwn = {}.hasOwnProperty;
    function classNames() {
        var classes = '';
        for(var i = 0; i < arguments.length; i++){
            var arg = arguments[i];
            if (arg) {
                classes = appendClass(classes, parseValue(arg));
            }
        }
        return classes;
    }
    function parseValue(arg) {
        if (typeof arg === 'string' || typeof arg === 'number') {
            return arg;
        }
        if (typeof arg !== 'object') {
            return '';
        }
        if (Array.isArray(arg)) {
            return classNames.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
            return arg.toString();
        }
        var classes = '';
        for(var key in arg){
            if (hasOwn.call(arg, key) && arg[key]) {
                classes = appendClass(classes, key);
            }
        }
        return classes;
    }
    function appendClass(value, newClass) {
        if (!newClass) {
            return value;
        }
        if (value) {
            return value + ' ' + newClass;
        }
        return value + newClass;
    }
    if (("TURBOPACK compile-time value", "object") !== 'undefined' && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
    } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
        // register as 'classnames', consistent with npm package name
        ((r)=>r !== undefined && __turbopack_context__.v(r))(function() {
            return classNames;
        }());
    } else {
        window.classNames = classNames;
    }
})();
}}),
"[project]/node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */ /* eslint-disable require-jsdoc, valid-jsdoc */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var MapShim = function() {
    if (typeof Map !== 'undefined') {
        return Map;
    }
    /**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */ function getIndex(arr, key) {
        var result = -1;
        arr.some(function(entry, index) {
            if (entry[0] === key) {
                result = index;
                return true;
            }
            return false;
        });
        return result;
    }
    return function() {
        function class_1() {
            this.__entries__ = [];
        }
        Object.defineProperty(class_1.prototype, "size", {
            /**
             * @returns {boolean}
             */ get: function() {
                return this.__entries__.length;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {*} key
         * @returns {*}
         */ class_1.prototype.get = function(key) {
            var index = getIndex(this.__entries__, key);
            var entry = this.__entries__[index];
            return entry && entry[1];
        };
        /**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */ class_1.prototype.set = function(key, value) {
            var index = getIndex(this.__entries__, key);
            if (~index) {
                this.__entries__[index][1] = value;
            } else {
                this.__entries__.push([
                    key,
                    value
                ]);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */ class_1.prototype.delete = function(key) {
            var entries = this.__entries__;
            var index = getIndex(entries, key);
            if (~index) {
                entries.splice(index, 1);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */ class_1.prototype.has = function(key) {
            return !!~getIndex(this.__entries__, key);
        };
        /**
         * @returns {void}
         */ class_1.prototype.clear = function() {
            this.__entries__.splice(0);
        };
        /**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */ class_1.prototype.forEach = function(callback, ctx) {
            if (ctx === void 0) {
                ctx = null;
            }
            for(var _i = 0, _a = this.__entries__; _i < _a.length; _i++){
                var entry = _a[_i];
                callback.call(ctx, entry[1], entry[0]);
            }
        };
        return class_1;
    }();
}();
/**
 * Detects whether window and document objects are available in current environment.
 */ var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;
// Returns global object of a current environment.
var global$1 = function() {
    if (typeof global !== 'undefined' && global.Math === Math) {
        return global;
    }
    if (typeof self !== 'undefined' && self.Math === Math) {
        return self;
    }
    if (typeof window !== 'undefined' && window.Math === Math) {
        return window;
    }
    // eslint-disable-next-line no-new-func
    return Function('return this')();
}();
/**
 * A shim for the requestAnimationFrame which falls back to the setTimeout if
 * first one is not supported.
 *
 * @returns {number} Requests' identifier.
 */ var requestAnimationFrame$1 = function() {
    if (typeof requestAnimationFrame === 'function') {
        // It's required to use a bounded function because IE sometimes throws
        // an "Invalid calling object" error if rAF is invoked without the global
        // object on the left hand side.
        return requestAnimationFrame.bind(global$1);
    }
    return function(callback) {
        return setTimeout(function() {
            return callback(Date.now());
        }, 1000 / 60);
    };
}();
// Defines minimum timeout before adding a trailing call.
var trailingTimeout = 2;
/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */ function throttle(callback, delay) {
    var leadingCall = false, trailingCall = false, lastCallTime = 0;
    /**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */ function resolvePending() {
        if (leadingCall) {
            leadingCall = false;
            callback();
        }
        if (trailingCall) {
            proxy();
        }
    }
    /**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */ function timeoutCallback() {
        requestAnimationFrame$1(resolvePending);
    }
    /**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */ function proxy() {
        var timeStamp = Date.now();
        if (leadingCall) {
            // Reject immediately following calls.
            if (timeStamp - lastCallTime < trailingTimeout) {
                return;
            }
            // Schedule new call to be in invoked when the pending one is resolved.
            // This is important for "transitions" which never actually start
            // immediately so there is a chance that we might miss one if change
            // happens amids the pending invocation.
            trailingCall = true;
        } else {
            leadingCall = true;
            trailingCall = false;
            setTimeout(timeoutCallback, delay);
        }
        lastCallTime = timeStamp;
    }
    return proxy;
}
// Minimum delay before invoking the update of observers.
var REFRESH_DELAY = 20;
// A list of substrings of CSS properties used to find transition events that
// might affect dimensions of observed elements.
var transitionKeys = [
    'top',
    'right',
    'bottom',
    'left',
    'width',
    'height',
    'size',
    'weight'
];
// Check if MutationObserver is available.
var mutationObserverSupported = typeof MutationObserver !== 'undefined';
/**
 * Singleton controller class which handles updates of ResizeObserver instances.
 */ var ResizeObserverController = function() {
    /**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */ function ResizeObserverController() {
        /**
         * Indicates whether DOM listeners have been added.
         *
         * @private {boolean}
         */ this.connected_ = false;
        /**
         * Tells that controller has subscribed for Mutation Events.
         *
         * @private {boolean}
         */ this.mutationEventsAdded_ = false;
        /**
         * Keeps reference to the instance of MutationObserver.
         *
         * @private {MutationObserver}
         */ this.mutationsObserver_ = null;
        /**
         * A list of connected observers.
         *
         * @private {Array<ResizeObserverSPI>}
         */ this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
    }
    /**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */ ResizeObserverController.prototype.addObserver = function(observer) {
        if (!~this.observers_.indexOf(observer)) {
            this.observers_.push(observer);
        }
        // Add listeners if they haven't been added yet.
        if (!this.connected_) {
            this.connect_();
        }
    };
    /**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */ ResizeObserverController.prototype.removeObserver = function(observer) {
        var observers = this.observers_;
        var index = observers.indexOf(observer);
        // Remove observer if it's present in registry.
        if (~index) {
            observers.splice(index, 1);
        }
        // Remove listeners if controller has no connected observers.
        if (!observers.length && this.connected_) {
            this.disconnect_();
        }
    };
    /**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */ ResizeObserverController.prototype.refresh = function() {
        var changesDetected = this.updateObservers_();
        // Continue running updates if changes have been detected as there might
        // be future ones caused by CSS transitions.
        if (changesDetected) {
            this.refresh();
        }
    };
    /**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */ ResizeObserverController.prototype.updateObservers_ = function() {
        // Collect observers that have active observations.
        var activeObservers = this.observers_.filter(function(observer) {
            return observer.gatherActive(), observer.hasActive();
        });
        // Deliver notifications in a separate cycle in order to avoid any
        // collisions between observers, e.g. when multiple instances of
        // ResizeObserver are tracking the same element and the callback of one
        // of them changes content dimensions of the observed target. Sometimes
        // this may result in notifications being blocked for the rest of observers.
        activeObservers.forEach(function(observer) {
            return observer.broadcastActive();
        });
        return activeObservers.length > 0;
    };
    /**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */ ResizeObserverController.prototype.connect_ = function() {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already added.
        if (!isBrowser || this.connected_) {
            return;
        }
        // Subscription to the "Transitionend" event is used as a workaround for
        // delayed transitions. This way it's possible to capture at least the
        // final state of an element.
        document.addEventListener('transitionend', this.onTransitionEnd_);
        window.addEventListener('resize', this.refresh);
        if (mutationObserverSupported) {
            this.mutationsObserver_ = new MutationObserver(this.refresh);
            this.mutationsObserver_.observe(document, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true
            });
        } else {
            document.addEventListener('DOMSubtreeModified', this.refresh);
            this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
    };
    /**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */ ResizeObserverController.prototype.disconnect_ = function() {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already removed.
        if (!isBrowser || !this.connected_) {
            return;
        }
        document.removeEventListener('transitionend', this.onTransitionEnd_);
        window.removeEventListener('resize', this.refresh);
        if (this.mutationsObserver_) {
            this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
            document.removeEventListener('DOMSubtreeModified', this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
    };
    /**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */ ResizeObserverController.prototype.onTransitionEnd_ = function(_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
        // Detect whether transition may affect dimensions of an element.
        var isReflowProperty = transitionKeys.some(function(key) {
            return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) {
            this.refresh();
        }
    };
    /**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */ ResizeObserverController.getInstance = function() {
        if (!this.instance_) {
            this.instance_ = new ResizeObserverController();
        }
        return this.instance_;
    };
    /**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */ ResizeObserverController.instance_ = null;
    return ResizeObserverController;
}();
/**
 * Defines non-writable/enumerable properties of the provided target object.
 *
 * @param {Object} target - Object for which to define properties.
 * @param {Object} props - Properties to be defined.
 * @returns {Object} Target object.
 */ var defineConfigurable = function(target, props) {
    for(var _i = 0, _a = Object.keys(props); _i < _a.length; _i++){
        var key = _a[_i];
        Object.defineProperty(target, key, {
            value: props[key],
            enumerable: false,
            writable: false,
            configurable: true
        });
    }
    return target;
};
/**
 * Returns the global object associated with provided element.
 *
 * @param {Object} target
 * @returns {Object}
 */ var getWindowOf = function(target) {
    // Assume that the element is an instance of Node, which means that it
    // has the "ownerDocument" property from which we can retrieve a
    // corresponding global object.
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
    // Return the local global object if it's not possible extract one from
    // provided element.
    return ownerGlobal || global$1;
};
// Placeholder of an empty content rectangle.
var emptyRect = createRectInit(0, 0, 0, 0);
/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */ function toFloat(value) {
    return parseFloat(value) || 0;
}
/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */ function getBordersSize(styles) {
    var positions = [];
    for(var _i = 1; _i < arguments.length; _i++){
        positions[_i - 1] = arguments[_i];
    }
    return positions.reduce(function(size, position) {
        var value = styles['border-' + position + '-width'];
        return size + toFloat(value);
    }, 0);
}
/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */ function getPaddings(styles) {
    var positions = [
        'top',
        'right',
        'bottom',
        'left'
    ];
    var paddings = {};
    for(var _i = 0, positions_1 = positions; _i < positions_1.length; _i++){
        var position = positions_1[_i];
        var value = styles['padding-' + position];
        paddings[position] = toFloat(value);
    }
    return paddings;
}
/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */ function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
}
/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */ function getHTMLElementContentRect(target) {
    // Client width & height properties can't be
    // used exclusively as they provide rounded values.
    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
    // By this condition we can catch all non-replaced inline, hidden and
    // detached elements. Though elements with width & height properties less
    // than 0.5 will be discarded as well.
    //
    // Without it we would need to implement separate methods for each of
    // those cases and it's not possible to perform a precise and performance
    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
    // gives wrong results for elements with width & height less than 0.5.
    if (!clientWidth && !clientHeight) {
        return emptyRect;
    }
    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;
    // Computed styles of width & height are being used because they are the
    // only dimensions available to JS that contain non-rounded values. It could
    // be possible to utilize the getBoundingClientRect if only it's data wasn't
    // affected by CSS transformations let alone paddings, borders and scroll bars.
    var width = toFloat(styles.width), height = toFloat(styles.height);
    // Width & height include paddings and borders when the 'border-box' box
    // model is applied (except for IE).
    if (styles.boxSizing === 'border-box') {
        // Following conditions are required to handle Internet Explorer which
        // doesn't include paddings and borders to computed CSS dimensions.
        //
        // We can say that if CSS dimensions + paddings are equal to the "client"
        // properties then it's either IE, and thus we don't need to subtract
        // anything, or an element merely doesn't have paddings/borders styles.
        if (Math.round(width + horizPad) !== clientWidth) {
            width -= getBordersSize(styles, 'left', 'right') + horizPad;
        }
        if (Math.round(height + vertPad) !== clientHeight) {
            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
        }
    }
    // Following steps can't be applied to the document's root element as its
    // client[Width/Height] properties represent viewport area of the window.
    // Besides, it's as well not necessary as the <html> itself neither has
    // rendered scroll bars nor it can be clipped.
    if (!isDocumentElement(target)) {
        // In some browsers (only in Firefox, actually) CSS width & height
        // include scroll bars size which can be removed at this step as scroll
        // bars are the only difference between rounded dimensions + paddings
        // and "client" properties, though that is not always true in Chrome.
        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
        var horizScrollbar = Math.round(height + vertPad) - clientHeight;
        // Chrome has a rather weird rounding of "client" properties.
        // E.g. for an element with content width of 314.2px it sometimes gives
        // the client width of 315px and for the width of 314.7px it may give
        // 314px. And it doesn't happen all the time. So just ignore this delta
        // as a non-relevant.
        if (Math.abs(vertScrollbar) !== 1) {
            width -= vertScrollbar;
        }
        if (Math.abs(horizScrollbar) !== 1) {
            height -= horizScrollbar;
        }
    }
    return createRectInit(paddings.left, paddings.top, width, height);
}
/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */ var isSVGGraphicsElement = function() {
    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
    // interface.
    if (typeof SVGGraphicsElement !== 'undefined') {
        return function(target) {
            return target instanceof getWindowOf(target).SVGGraphicsElement;
        };
    }
    // If it's so, then check that element is at least an instance of the
    // SVGElement and that it has the "getBBox" method.
    // eslint-disable-next-line no-extra-parens
    return function(target) {
        return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';
    };
}();
/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */ function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
}
/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */ function getContentRect(target) {
    if (!isBrowser) {
        return emptyRect;
    }
    if (isSVGGraphicsElement(target)) {
        return getSVGContentRect(target);
    }
    return getHTMLElementContentRect(target);
}
/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */ function createReadOnlyRect(_a) {
    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);
    // Rectangle's properties are not writable and non-enumerable.
    defineConfigurable(rect, {
        x: x,
        y: y,
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: height + y,
        left: x
    });
    return rect;
}
/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */ function createRectInit(x, y, width, height) {
    return {
        x: x,
        y: y,
        width: width,
        height: height
    };
}
/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */ var ResizeObservation = function() {
    /**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */ function ResizeObservation(target) {
        /**
         * Broadcasted width of content rectangle.
         *
         * @type {number}
         */ this.broadcastWidth = 0;
        /**
         * Broadcasted height of content rectangle.
         *
         * @type {number}
         */ this.broadcastHeight = 0;
        /**
         * Reference to the last observed content rectangle.
         *
         * @private {DOMRectInit}
         */ this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
    }
    /**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */ ResizeObservation.prototype.isActive = function() {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
    };
    /**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */ ResizeObservation.prototype.broadcastRect = function() {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
    };
    return ResizeObservation;
}();
var ResizeObserverEntry = function() {
    /**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */ function ResizeObserverEntry(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        // According to the specification following properties are not writable
        // and are also not enumerable in the native implementation.
        //
        // Property accessors are not being used as they'd require to define a
        // private WeakMap storage which may cause memory leaks in browsers that
        // don't support this type of collections.
        defineConfigurable(this, {
            target: target,
            contentRect: contentRect
        });
    }
    return ResizeObserverEntry;
}();
var ResizeObserverSPI = function() {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */ function ResizeObserverSPI(callback, controller, callbackCtx) {
        /**
         * Collection of resize observations that have detected changes in dimensions
         * of elements.
         *
         * @private {Array<ResizeObservation>}
         */ this.activeObservations_ = [];
        /**
         * Registry of the ResizeObservation instances.
         *
         * @private {Map<Element, ResizeObservation>}
         */ this.observations_ = new MapShim();
        if (typeof callback !== 'function') {
            throw new TypeError('The callback provided as parameter 1 is not a function.');
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
    }
    /**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */ ResizeObserverSPI.prototype.observe = function(target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is already being observed.
        if (observations.has(target)) {
            return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        // Force the update of observations.
        this.controller_.refresh();
    };
    /**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */ ResizeObserverSPI.prototype.unobserve = function(target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is not being observed.
        if (!observations.has(target)) {
            return;
        }
        observations.delete(target);
        if (!observations.size) {
            this.controller_.removeObserver(this);
        }
    };
    /**
     * Stops observing all elements.
     *
     * @returns {void}
     */ ResizeObserverSPI.prototype.disconnect = function() {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
    };
    /**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */ ResizeObserverSPI.prototype.gatherActive = function() {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function(observation) {
            if (observation.isActive()) {
                _this.activeObservations_.push(observation);
            }
        });
    };
    /**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */ ResizeObserverSPI.prototype.broadcastActive = function() {
        // Do nothing if observer doesn't have active observations.
        if (!this.hasActive()) {
            return;
        }
        var ctx = this.callbackCtx_;
        // Create ResizeObserverEntry instance for every active observation.
        var entries = this.activeObservations_.map(function(observation) {
            return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
    };
    /**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */ ResizeObserverSPI.prototype.clearActive = function() {
        this.activeObservations_.splice(0);
    };
    /**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */ ResizeObserverSPI.prototype.hasActive = function() {
        return this.activeObservations_.length > 0;
    };
    return ResizeObserverSPI;
}();
// Registry of internal observers. If WeakMap is not available use current shim
// for the Map collection as it has all required methods and because WeakMap
// can't be fully polyfilled anyway.
var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
/**
 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
 * exposing only those methods and properties that are defined in the spec.
 */ var ResizeObserver = function() {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */ function ResizeObserver(callback) {
        if (!(this instanceof ResizeObserver)) {
            throw new TypeError('Cannot call a class as a function.');
        }
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
    }
    return ResizeObserver;
}();
// Expose public methods of ResizeObserver.
[
    'observe',
    'unobserve',
    'disconnect'
].forEach(function(method) {
    ResizeObserver.prototype[method] = function() {
        var _a;
        return (_a = observers.get(this))[method].apply(_a, arguments);
    };
});
var index = function() {
    // Export existing implementation if available.
    if (typeof global$1.ResizeObserver !== 'undefined') {
        return global$1.ResizeObserver;
    }
    return ResizeObserver;
}();
const __TURBOPACK__default__export__ = index;
}}),
"[project]/node_modules/string-convert/camel2hyphen.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var camel2hyphen = function(str) {
    return str.replace(/[A-Z]/g, function(match) {
        return '-' + match.toLowerCase();
    }).toLowerCase();
};
module.exports = camel2hyphen;
}}),
"[project]/node_modules/json2mq/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var camel2hyphen = __turbopack_context__.r("[project]/node_modules/string-convert/camel2hyphen.js [app-client] (ecmascript)");
var isDimension = function(feature) {
    var re = /[height|width]$/;
    return re.test(feature);
};
var obj2mq = function(obj) {
    var mq = '';
    var features = Object.keys(obj);
    features.forEach(function(feature, index) {
        var value = obj[feature];
        feature = camel2hyphen(feature);
        // Add px to dimension features
        if (isDimension(feature) && typeof value === 'number') {
            value = value + 'px';
        }
        if (value === true) {
            mq += feature;
        } else if (value === false) {
            mq += 'not ' + feature;
        } else {
            mq += '(' + feature + ': ' + value + ')';
        }
        if (index < features.length - 1) {
            mq += ' and ';
        }
    });
    return mq;
};
var json2mq = function(query) {
    var mq = '';
    if (typeof query === 'string') {
        return query;
    }
    // Handling array of media queries
    if (query instanceof Array) {
        query.forEach(function(q, index) {
            mq += obj2mq(q);
            if (index < query.length - 1) {
                mq += ', ';
            }
        });
        return mq;
    }
    // Handling single media query
    return obj2mq(query);
};
module.exports = json2mq;
}}),
}]);

//# sourceMappingURL=node_modules_dcf35748._.js.map