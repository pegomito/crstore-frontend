(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/@zag-js/auto-resize/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "autoResizeInput": (()=>autoResizeInput),
    "autoresizeTextarea": (()=>autoresizeTextarea)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
;
// src/autoresize-input.ts
function getVisualStyles(node) {
    if (!node) return;
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getComputedStyle"])(node);
    return "box-sizing:" + style.boxSizing + ";border-left:" + style.borderLeftWidth + " solid red;border-right:" + style.borderRightWidth + " solid red;font-family:" + style.fontFamily + ";font-feature-settings:" + style.fontFeatureSettings + ";font-kerning:" + style.fontKerning + ";font-size:" + style.fontSize + ";font-stretch:" + style.fontStretch + ";font-style:" + style.fontStyle + ";font-variant:" + style.fontVariant + ";font-variant-caps:" + style.fontVariantCaps + ";font-variant-ligatures:" + style.fontVariantLigatures + ";font-variant-numeric:" + style.fontVariantNumeric + ";font-weight:" + style.fontWeight + ";letter-spacing:" + style.letterSpacing + ";margin-left:" + style.marginLeft + ";margin-right:" + style.marginRight + ";padding-left:" + style.paddingLeft + ";padding-right:" + style.paddingRight + ";text-indent:" + style.textIndent + ";text-transform:" + style.textTransform;
}
// src/autoresize-input.ts
function createGhostElement(doc) {
    var el = doc.createElement("div");
    el.id = "ghost";
    el.style.cssText = "display:inline-block;height:0;overflow:hidden;position:absolute;top:0;visibility:hidden;white-space:nowrap;";
    doc.body.appendChild(el);
    return el;
}
function autoResizeInput(input) {
    if (!input) return;
    const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDocument"])(input);
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(input);
    const ghost = createGhostElement(doc);
    const cssText = getVisualStyles(input);
    if (cssText) ghost.style.cssText += cssText;
    function resize() {
        win.requestAnimationFrame(()=>{
            ghost.innerHTML = input.value;
            const rect = win.getComputedStyle(ghost);
            input?.style.setProperty("width", rect.width);
        });
    }
    resize();
    input?.addEventListener("input", resize);
    input?.addEventListener("change", resize);
    return ()=>{
        doc.body.removeChild(ghost);
        input?.removeEventListener("input", resize);
        input?.removeEventListener("change", resize);
    };
}
var autoresizeTextarea = (el)=>{
    if (!el) return;
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getComputedStyle"])(el);
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(el);
    const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDocument"])(el);
    const resize = ()=>{
        requestAnimationFrame(()=>{
            el.style.height = "auto";
            let newHeight;
            if (style.boxSizing === "content-box") {
                newHeight = el.scrollHeight - (parseFloat(style.paddingTop) + parseFloat(style.paddingBottom));
            } else {
                newHeight = el.scrollHeight + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
            }
            if (style.maxHeight !== "none" && newHeight > parseFloat(style.maxHeight)) {
                if (style.overflowY === "hidden") {
                    el.style.overflowY = "scroll";
                }
                newHeight = parseFloat(style.maxHeight);
            } else if (style.overflowY !== "hidden") {
                el.style.overflowY = "hidden";
            }
            el.style.height = `${newHeight}px`;
        });
    };
    el.addEventListener("input", resize);
    el.form?.addEventListener("reset", resize);
    const elementPrototype = Object.getPrototypeOf(el);
    const descriptor = Object.getOwnPropertyDescriptor(elementPrototype, "value");
    Object.defineProperty(el, "value", {
        ...descriptor,
        set () {
            descriptor?.set?.apply(this, arguments);
            resize();
        }
    });
    const resizeObserver = new win.ResizeObserver(()=>{
        requestAnimationFrame(()=>resize());
    });
    resizeObserver.observe(el);
    const attrObserver = new win.MutationObserver(()=>resize());
    attrObserver.observe(el, {
        attributes: true,
        attributeFilter: [
            "rows",
            "placeholder"
        ]
    });
    doc.fonts?.addEventListener("loadingdone", resize);
    return ()=>{
        el.removeEventListener("input", resize);
        el.form?.removeEventListener("reset", resize);
        doc.fonts?.removeEventListener("loadingdone", resize);
        resizeObserver.disconnect();
        attrObserver.disconnect();
    };
};
;
}}),
"[project]/node_modules/@zag-js/presence/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "connect": (()=>connect),
    "machine": (()=>machine),
    "props": (()=>props)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
// src/presence.connect.ts
function connect(service, _normalize) {
    const { state, send, context } = service;
    const present = state.matches("mounted", "unmountSuspended");
    return {
        skip: !context.get("initial"),
        present,
        setNode (node) {
            if (!node) return;
            send({
                type: "NODE.SET",
                node
            });
        },
        unmount () {
            send({
                type: "UNMOUNT"
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            ...props2,
            present: !!props2.present
        };
    },
    initialState ({ prop }) {
        return prop("present") ? "mounted" : "unmounted";
    },
    refs () {
        return {
            node: null,
            styles: null
        };
    },
    context ({ bindable }) {
        return {
            unmountAnimationName: bindable(()=>({
                    defaultValue: null
                })),
            prevAnimationName: bindable(()=>({
                    defaultValue: null
                })),
            present: bindable(()=>({
                    defaultValue: false
                })),
            initial: bindable(()=>({
                    sync: true,
                    defaultValue: false
                }))
        };
    },
    exit: [
        "clearInitial",
        "cleanupNode"
    ],
    watch ({ track, action, prop }) {
        track([
            ()=>prop("present")
        ], ()=>{
            action([
                "setInitial",
                "syncPresence"
            ]);
        });
    },
    on: {
        "NODE.SET": {
            actions: [
                "setNode",
                "setStyles"
            ]
        }
    },
    states: {
        mounted: {
            on: {
                UNMOUNT: {
                    target: "unmounted",
                    actions: [
                        "clearPrevAnimationName",
                        "invokeOnExitComplete"
                    ]
                },
                "UNMOUNT.SUSPEND": {
                    target: "unmountSuspended"
                }
            }
        },
        unmountSuspended: {
            effects: [
                "trackAnimationEvents"
            ],
            on: {
                MOUNT: {
                    target: "mounted",
                    actions: [
                        "setPrevAnimationName"
                    ]
                },
                UNMOUNT: {
                    target: "unmounted",
                    actions: [
                        "clearPrevAnimationName",
                        "invokeOnExitComplete"
                    ]
                }
            }
        },
        unmounted: {
            on: {
                MOUNT: {
                    target: "mounted",
                    actions: [
                        "setPrevAnimationName"
                    ]
                }
            }
        }
    },
    implementations: {
        actions: {
            setInitial: ({ context })=>{
                if (context.get("initial")) return;
                queueMicrotask(()=>{
                    context.set("initial", true);
                });
            },
            clearInitial: ({ context })=>{
                context.set("initial", false);
            },
            cleanupNode: ({ refs })=>{
                refs.set("node", null);
                refs.set("styles", null);
            },
            invokeOnExitComplete: ({ prop })=>{
                prop("onExitComplete")?.();
            },
            setNode: ({ refs, event })=>{
                refs.set("node", event.node);
            },
            setStyles: ({ refs, event })=>{
                refs.set("styles", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getComputedStyle"])(event.node));
            },
            syncPresence: ({ context, refs, send, prop })=>{
                const presentProp = prop("present");
                if (presentProp) {
                    return send({
                        type: "MOUNT",
                        src: "presence.changed"
                    });
                }
                const node = refs.get("node");
                if (!presentProp && node?.ownerDocument.visibilityState === "hidden") {
                    return send({
                        type: "UNMOUNT",
                        src: "visibilitychange"
                    });
                }
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const animationName = getAnimationName(refs.get("styles"));
                    context.set("unmountAnimationName", animationName);
                    if (animationName === "none" || animationName === context.get("prevAnimationName") || refs.get("styles")?.display === "none" || refs.get("styles")?.animationDuration === "0s") {
                        send({
                            type: "UNMOUNT",
                            src: "presence.changed"
                        });
                    } else {
                        send({
                            type: "UNMOUNT.SUSPEND"
                        });
                    }
                });
            },
            setPrevAnimationName: ({ context, refs })=>{
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    context.set("prevAnimationName", getAnimationName(refs.get("styles")));
                });
            },
            clearPrevAnimationName: ({ context })=>{
                context.set("prevAnimationName", null);
            }
        },
        effects: {
            trackAnimationEvents: ({ context, refs, send })=>{
                const node = refs.get("node");
                if (!node) return;
                const onStart = (event)=>{
                    const target = event.composedPath?.()?.[0] ?? event.target;
                    if (target === node) {
                        context.set("prevAnimationName", getAnimationName(refs.get("styles")));
                    }
                };
                const onEnd = (event)=>{
                    const animationName = getAnimationName(refs.get("styles"));
                    const target = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventTarget"])(event);
                    if (target === node && animationName === context.get("unmountAnimationName")) {
                        send({
                            type: "UNMOUNT",
                            src: "animationend"
                        });
                    }
                };
                node.addEventListener("animationstart", onStart);
                node.addEventListener("animationcancel", onEnd);
                node.addEventListener("animationend", onEnd);
                const cleanupStyles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setStyle"])(node, {
                    animationFillMode: "forwards"
                });
                return ()=>{
                    node.removeEventListener("animationstart", onStart);
                    node.removeEventListener("animationcancel", onEnd);
                    node.removeEventListener("animationend", onEnd);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nextTick"])(()=>cleanupStyles());
                };
            }
        }
    }
});
function getAnimationName(styles) {
    return styles?.animationName || "none";
}
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "onExitComplete",
    "present",
    "immediate"
]);
;
}}),
"[project]/node_modules/@zag-js/clipboard/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "anatomy": (()=>anatomy),
    "connect": (()=>connect),
    "contextProps": (()=>contextProps),
    "indicatorProps": (()=>indicatorProps),
    "machine": (()=>machine),
    "props": (()=>props),
    "splitIndicatorProps": (()=>splitIndicatorProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/clipboard.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("clipboard").parts("root", "control", "trigger", "indicator", "input", "label");
var parts = anatomy.build();
var getRootId = (ctx)=>ctx.ids?.root ?? `clip:${ctx.id}`;
var getInputId = (ctx)=>ctx.ids?.input ?? `clip:${ctx.id}:input`;
var getLabelId = (ctx)=>ctx.ids?.label ?? `clip:${ctx.id}:label`;
var getInputEl = (ctx)=>ctx.getById(getInputId(ctx));
var writeToClipboard = (ctx, value)=>copyText(ctx.getDoc(), value);
function createNode(doc, text) {
    const node = doc.createElement("pre");
    Object.assign(node.style, {
        width: "1px",
        height: "1px",
        position: "fixed",
        top: "5px"
    });
    node.textContent = text;
    return node;
}
function copyNode(node) {
    const win = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWindow"])(node);
    const selection = win.getSelection();
    if (selection == null) {
        return Promise.reject(new Error());
    }
    selection.removeAllRanges();
    const doc = node.ownerDocument;
    const range = doc.createRange();
    range.selectNodeContents(node);
    selection.addRange(range);
    doc.execCommand("copy");
    selection.removeAllRanges();
    return Promise.resolve();
}
function copyText(doc, text) {
    const win = doc.defaultView || window;
    if (win.navigator.clipboard?.writeText !== void 0) {
        return win.navigator.clipboard.writeText(text);
    }
    if (!doc.body) {
        return Promise.reject(new Error());
    }
    const node = createNode(doc, text);
    doc.body.appendChild(node);
    copyNode(node);
    doc.body.removeChild(node);
    return Promise.resolve();
}
// src/clipboard.connect.ts
function connect(service, normalize) {
    const { state, send, context, scope } = service;
    const copied = state.matches("copied");
    return {
        copied,
        value: context.get("value"),
        setValue (value) {
            send({
                type: "VALUE.SET",
                value
            });
        },
        copy () {
            send({
                type: "COPY"
            });
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied),
                id: getRootId(scope)
            });
        },
        getLabelProps () {
            return normalize.label({
                ...parts.label.attrs,
                htmlFor: getInputId(scope),
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied),
                id: getLabelId(scope)
            });
        },
        getControlProps () {
            return normalize.element({
                ...parts.control.attrs,
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied)
            });
        },
        getInputProps () {
            return normalize.input({
                ...parts.input.attrs,
                defaultValue: context.get("value"),
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied),
                readOnly: true,
                "data-readonly": "true",
                id: getInputId(scope),
                onFocus (event) {
                    event.currentTarget.select();
                },
                onCopy () {
                    send({
                        type: "INPUT.COPY"
                    });
                }
            });
        },
        getTriggerProps () {
            return normalize.button({
                ...parts.trigger.attrs,
                type: "button",
                "aria-label": copied ? "Copied to clipboard" : "Copy to clipboard",
                "data-copied": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(copied),
                onClick () {
                    send({
                        type: "COPY"
                    });
                }
            });
        },
        getIndicatorProps (props2) {
            return normalize.element({
                ...parts.indicator.attrs,
                hidden: props2.copied !== copied
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            timeout: 3e3,
            defaultValue: "",
            ...props2
        };
    },
    initialState () {
        return "idle";
    },
    context ({ prop, bindable }) {
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    onChange (value) {
                        prop("onValueChange")?.({
                            value
                        });
                    }
                }))
        };
    },
    watch ({ track, context, action }) {
        track([
            ()=>context.get("value")
        ], ()=>{
            action([
                "syncInputElement"
            ]);
        });
    },
    on: {
        "VALUE.SET": {
            actions: [
                "setValue"
            ]
        },
        COPY: {
            target: "copied",
            actions: [
                "copyToClipboard",
                "invokeOnCopy"
            ]
        }
    },
    states: {
        idle: {
            on: {
                "INPUT.COPY": {
                    target: "copied",
                    actions: [
                        "invokeOnCopy"
                    ]
                }
            }
        },
        copied: {
            effects: [
                "waitForTimeout"
            ],
            on: {
                "COPY.DONE": {
                    target: "idle"
                },
                COPY: {
                    target: "copied",
                    actions: [
                        "copyToClipboard",
                        "invokeOnCopy"
                    ]
                },
                "INPUT.COPY": {
                    actions: [
                        "invokeOnCopy"
                    ]
                }
            }
        }
    },
    implementations: {
        effects: {
            waitForTimeout ({ prop, send }) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setRafTimeout"])(()=>{
                    send({
                        type: "COPY.DONE"
                    });
                }, prop("timeout"));
            }
        },
        actions: {
            setValue ({ context, event }) {
                context.set("value", event.value);
            },
            copyToClipboard ({ context, scope }) {
                writeToClipboard(scope, context.get("value"));
            },
            invokeOnCopy ({ prop }) {
                prop("onStatusChange")?.({
                    copied: true
                });
            },
            syncInputElement ({ context, scope }) {
                const inputEl = getInputEl(scope);
                if (!inputEl) return;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setElementValue"])(inputEl, context.get("value"));
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "getRootNode",
    "id",
    "ids",
    "value",
    "defaultValue",
    "timeout",
    "onStatusChange",
    "onValueChange"
]);
var contextProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var indicatorProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "copied"
]);
var splitIndicatorProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(indicatorProps);
;
}}),
"[project]/node_modules/@zag-js/highlight-word/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// src/normalize-span.ts
__turbopack_context__.s({
    "highlightWord": (()=>highlightWord)
});
var normalizeSpan = (spans, len)=>{
    const result = [];
    const append = (start, end, match)=>{
        if (end - start > 0) result.push({
            start,
            end,
            match
        });
    };
    if (spans.length === 0) {
        append(0, len, false);
    } else {
        let lastIndex = 0;
        for (const chunk of spans){
            append(lastIndex, chunk.start, false);
            append(chunk.start, chunk.end, true);
            lastIndex = chunk.end;
        }
        append(lastIndex, len, false);
    }
    return result;
};
// src/highlight-first.ts
function highlightFirst(props) {
    const { text, query, ignoreCase } = props;
    const searchText = ignoreCase ? text.toLowerCase() : text;
    const searchQuery = ignoreCase ? typeof query === "string" ? query.toLowerCase() : query : query;
    const start = typeof searchText === "string" ? searchText.indexOf(searchQuery) : -1;
    if (start === -1) {
        return [
            {
                text,
                match: false
            }
        ];
    }
    const end = start + searchQuery.length;
    const spans = [
        {
            start,
            end
        }
    ];
    return normalizeSpan(spans, text.length).map((chunk)=>({
            text: text.slice(chunk.start, chunk.end),
            match: !!chunk.match
        }));
}
// src/highlight-multiple.ts
var escapeRegexp = (term)=>term.replace(/[|\\{}()[\]^$+*?.-]/g, (char)=>`\\${char}`);
var buildRegex = (queryProp, flags)=>{
    const query = queryProp.filter(Boolean).map((text)=>escapeRegexp(text));
    return new RegExp(`(${query.join("|")})`, flags);
};
var getRegexFlags = (ignoreCase, matchAll = true)=>`${ignoreCase ? "i" : ""}${matchAll ? "g" : ""}`;
function highlightMultiple(props) {
    const { text, query, ignoreCase, matchAll } = props;
    if (query.length === 0) {
        return [
            {
                text,
                match: false
            }
        ];
    }
    const flags = getRegexFlags(ignoreCase, matchAll);
    const regex = buildRegex(Array.isArray(query) ? query : [
        query
    ], flags);
    const spans = [
        ...text.matchAll(regex)
    ].map((match)=>({
            start: match.index || 0,
            end: (match.index || 0) + match[0].length
        }));
    return normalizeSpan(spans, props.text.length).map((chunk)=>({
            text: props.text.slice(chunk.start, chunk.end),
            match: !!chunk.match
        }));
}
// src/highlight.ts
var highlightWord = (props)=>{
    if (props.matchAll == null) {
        props.matchAll = Array.isArray(props.query);
    }
    if (!props.matchAll && Array.isArray(props.query)) {
        throw new Error("matchAll must be true when using multiple queries");
    }
    return props.matchAll ? highlightMultiple(props) : highlightFirst(props);
};
;
}}),
"[project]/node_modules/@zag-js/pagination/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "anatomy": (()=>anatomy),
    "connect": (()=>connect),
    "ellipsisProps": (()=>ellipsisProps),
    "itemProps": (()=>itemProps),
    "machine": (()=>machine),
    "props": (()=>props),
    "splitEllipsisProps": (()=>splitEllipsisProps),
    "splitItemProps": (()=>splitItemProps),
    "splitProps": (()=>splitProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/pagination.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("pagination").parts("root", "item", "ellipsis", "prevTrigger", "nextTrigger");
var parts = anatomy.build();
// src/pagination.dom.ts
var getRootId = (ctx)=>ctx.ids?.root ?? `pagination:${ctx.id}`;
var getPrevTriggerId = (ctx)=>ctx.ids?.prevTrigger ?? `pagination:${ctx.id}:prev`;
var getNextTriggerId = (ctx)=>ctx.ids?.nextTrigger ?? `pagination:${ctx.id}:next`;
var getEllipsisId = (ctx, index)=>ctx.ids?.ellipsis?.(index) ?? `pagination:${ctx.id}:ellipsis:${index}`;
var getItemId = (ctx, page)=>ctx.ids?.item?.(page) ?? `pagination:${ctx.id}:item:${page}`;
// src/pagination.utils.ts
var range = (start, end)=>{
    let length = end - start + 1;
    return Array.from({
        length
    }, (_, idx)=>idx + start);
};
var transform = (items)=>{
    return items.map((value)=>{
        if (typeof value === "number") return {
            type: "page",
            value
        };
        return {
            type: "ellipsis"
        };
    });
};
var ELLIPSIS = "ellipsis";
var getRange = (ctx)=>{
    const { page, totalPages, siblingCount } = ctx;
    const totalPageNumbers = Math.min(2 * siblingCount + 5, totalPages);
    const firstPageIndex = 1;
    const lastPageIndex = totalPages;
    const leftSiblingIndex = Math.max(page - siblingCount, firstPageIndex);
    const rightSiblingIndex = Math.min(page + siblingCount, lastPageIndex);
    const showLeftEllipsis = leftSiblingIndex > firstPageIndex + 1;
    const showRightEllipsis = rightSiblingIndex < lastPageIndex - 1;
    const itemCount = totalPageNumbers - 2;
    if (!showLeftEllipsis && showRightEllipsis) {
        const leftRange = range(1, itemCount);
        return [
            ...leftRange,
            ELLIPSIS,
            lastPageIndex
        ];
    }
    if (showLeftEllipsis && !showRightEllipsis) {
        const rightRange = range(lastPageIndex - itemCount + 1, lastPageIndex);
        return [
            firstPageIndex,
            ELLIPSIS,
            ...rightRange
        ];
    }
    if (showLeftEllipsis && showRightEllipsis) {
        const middleRange = range(leftSiblingIndex, rightSiblingIndex);
        return [
            firstPageIndex,
            ELLIPSIS,
            ...middleRange,
            ELLIPSIS,
            lastPageIndex
        ];
    }
    const fullRange = range(firstPageIndex, lastPageIndex);
    return fullRange;
};
var getTransformedRange = (ctx)=>transform(getRange(ctx));
// src/pagination.connect.ts
function connect(service, normalize) {
    const { send, scope, prop, computed, context } = service;
    const totalPages = computed("totalPages");
    const page = context.get("page");
    const translations = prop("translations");
    const count = prop("count");
    const previousPage = computed("previousPage");
    const nextPage = computed("nextPage");
    const pageRange = computed("pageRange");
    const type = prop("type");
    const isButton = type === "button";
    const isFirstPage = page === 1;
    const isLastPage = page === totalPages;
    const pages = getTransformedRange({
        page,
        totalPages,
        siblingCount: prop("siblingCount")
    });
    return {
        count,
        page,
        pageSize: context.get("pageSize"),
        totalPages,
        pages,
        previousPage,
        nextPage,
        pageRange,
        slice (data) {
            return data.slice(pageRange.start, pageRange.end);
        },
        setPageSize (size) {
            send({
                type: "SET_PAGE_SIZE",
                size
            });
        },
        setPage (page2) {
            send({
                type: "SET_PAGE",
                page: page2
            });
        },
        goToNextPage () {
            send({
                type: "NEXT_PAGE"
            });
        },
        goToPrevPage () {
            send({
                type: "PREVIOUS_PAGE"
            });
        },
        goToFirstPage () {
            send({
                type: "FIRST_PAGE"
            });
        },
        goToLastPage () {
            send({
                type: "LAST_PAGE"
            });
        },
        getRootProps () {
            return normalize.element({
                id: getRootId(scope),
                ...parts.root.attrs,
                dir: prop("dir"),
                "aria-label": translations.rootLabel
            });
        },
        getEllipsisProps (props2) {
            return normalize.element({
                id: getEllipsisId(scope, props2.index),
                ...parts.ellipsis.attrs,
                dir: prop("dir")
            });
        },
        getItemProps (props2) {
            const index = props2.value;
            const isCurrentPage = index === page;
            return normalize.element({
                id: getItemId(scope, index),
                ...parts.item.attrs,
                dir: prop("dir"),
                "data-index": index,
                "data-selected": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(isCurrentPage),
                "aria-current": isCurrentPage ? "page" : void 0,
                "aria-label": translations.itemLabel?.({
                    page: index,
                    totalPages
                }),
                onClick () {
                    send({
                        type: "SET_PAGE",
                        page: index
                    });
                },
                ...isButton && {
                    type: "button"
                }
            });
        },
        getPrevTriggerProps () {
            return normalize.element({
                id: getPrevTriggerId(scope),
                ...parts.prevTrigger.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(isFirstPage),
                "aria-label": translations.prevTriggerLabel,
                onClick () {
                    send({
                        type: "PREVIOUS_PAGE"
                    });
                },
                ...isButton && {
                    disabled: isFirstPage,
                    type: "button"
                }
            });
        },
        getNextTriggerProps () {
            return normalize.element({
                id: getNextTriggerId(scope),
                ...parts.nextTrigger.attrs,
                dir: prop("dir"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(isLastPage),
                "aria-label": translations.nextTriggerLabel,
                onClick () {
                    send({
                        type: "NEXT_PAGE"
                    });
                },
                ...isButton && {
                    disabled: isLastPage,
                    type: "button"
                }
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            defaultPageSize: 10,
            siblingCount: 1,
            defaultPage: 1,
            type: "button",
            count: 1,
            ...props2,
            translations: {
                rootLabel: "pagination",
                prevTriggerLabel: "previous page",
                nextTriggerLabel: "next page",
                itemLabel ({ page, totalPages }) {
                    const isLastPage = totalPages > 1 && page === totalPages;
                    return `${isLastPage ? "last page, " : ""}page ${page}`;
                },
                ...props2.translations
            }
        };
    },
    initialState () {
        return "idle";
    },
    context ({ prop, bindable, getContext }) {
        return {
            page: bindable(()=>({
                    value: prop("page"),
                    defaultValue: prop("defaultPage"),
                    onChange (value) {
                        const context = getContext();
                        prop("onPageChange")?.({
                            page: value,
                            pageSize: context.get("pageSize")
                        });
                    }
                })),
            pageSize: bindable(()=>({
                    value: prop("pageSize"),
                    defaultValue: prop("defaultPageSize"),
                    onChange (value) {
                        prop("onPageSizeChange")?.({
                            pageSize: value
                        });
                    }
                }))
        };
    },
    watch ({ track, context, action }) {
        track([
            ()=>context.get("pageSize")
        ], ()=>{
            action([
                "setPageIfNeeded"
            ]);
        });
    },
    computed: {
        totalPages: ({ context, prop })=>Math.ceil(prop("count") / context.get("pageSize")),
        previousPage: ({ context })=>context.get("page") === 1 ? null : context.get("page") - 1,
        nextPage: ({ context, computed })=>context.get("page") === computed("totalPages") ? null : context.get("page") + 1,
        pageRange: ({ context, prop })=>{
            const start = (context.get("page") - 1) * context.get("pageSize");
            const end = Math.min(start + context.get("pageSize"), prop("count"));
            return {
                start,
                end
            };
        },
        isValidPage: ({ context, computed })=>context.get("page") >= 1 && context.get("page") <= computed("totalPages")
    },
    on: {
        SET_PAGE: {
            guard: "isValidPage",
            actions: [
                "setPage"
            ]
        },
        SET_PAGE_SIZE: {
            actions: [
                "setPageSize"
            ]
        },
        FIRST_PAGE: {
            actions: [
                "goToFirstPage"
            ]
        },
        LAST_PAGE: {
            actions: [
                "goToLastPage"
            ]
        },
        PREVIOUS_PAGE: {
            guard: "canGoToPrevPage",
            actions: [
                "goToPrevPage"
            ]
        },
        NEXT_PAGE: {
            guard: "canGoToNextPage",
            actions: [
                "goToNextPage"
            ]
        }
    },
    states: {
        idle: {}
    },
    implementations: {
        guards: {
            isValidPage: ({ event, computed })=>event.page >= 1 && event.page <= computed("totalPages"),
            isValidCount: ({ context, event })=>context.get("page") > event.count,
            canGoToNextPage: ({ context, computed })=>context.get("page") < computed("totalPages"),
            canGoToPrevPage: ({ context })=>context.get("page") > 1
        },
        actions: {
            setPage ({ context, event, computed }) {
                const page = clampPage(event.page, computed("totalPages"));
                context.set("page", page);
            },
            setPageSize ({ context, event }) {
                context.set("pageSize", event.size);
            },
            goToFirstPage ({ context }) {
                context.set("page", 1);
            },
            goToLastPage ({ context, computed }) {
                context.set("page", computed("totalPages"));
            },
            goToPrevPage ({ context, computed }) {
                context.set("page", (prev)=>clampPage(prev - 1, computed("totalPages")));
            },
            goToNextPage ({ context, computed }) {
                context.set("page", (prev)=>clampPage(prev + 1, computed("totalPages")));
            },
            setPageIfNeeded ({ context, computed }) {
                if (computed("isValidPage")) return;
                context.set("page", 1);
            }
        }
    }
});
var clampPage = (page, totalPages)=>Math.min(Math.max(page, 1), totalPages);
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "count",
    "dir",
    "getRootNode",
    "id",
    "ids",
    "onPageChange",
    "onPageSizeChange",
    "page",
    "defaultPage",
    "pageSize",
    "defaultPageSize",
    "siblingCount",
    "translations",
    "type"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var itemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "value",
    "type"
]);
var splitItemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(itemProps);
var ellipsisProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "index"
]);
var splitEllipsisProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(ellipsisProps);
;
}}),
"[project]/node_modules/@zag-js/steps/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "anatomy": (()=>anatomy),
    "connect": (()=>connect),
    "machine": (()=>machine),
    "props": (()=>props),
    "splitProps": (()=>splitProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/steps.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("steps").parts("root", "list", "item", "trigger", "indicator", "separator", "content", "nextTrigger", "prevTrigger", "progress");
var parts = anatomy.build();
// src/steps.dom.ts
var getRootId = (ctx)=>ctx.ids?.root ?? `steps:${ctx.id}`;
var getListId = (ctx)=>ctx.ids?.list ?? `steps:${ctx.id}:list`;
var getTriggerId = (ctx, index)=>ctx.ids?.triggerId?.(index) ?? `steps:${ctx.id}:trigger:${index}`;
var getContentId = (ctx, index)=>ctx.ids?.contentId?.(index) ?? `steps:${ctx.id}:content:${index}`;
// src/steps.connect.ts
function connect(service, normalize) {
    const { context, send, computed, prop, scope } = service;
    const step = context.get("step");
    const count = prop("count");
    const percent = computed("percent");
    const hasNextStep = computed("hasNextStep");
    const hasPrevStep = computed("hasPrevStep");
    const getItemState = (props2)=>({
            triggerId: getTriggerId(scope, props2.index),
            contentId: getContentId(scope, props2.index),
            current: props2.index === step,
            completed: props2.index < step,
            incomplete: props2.index > step,
            index: props2.index,
            first: props2.index === 0,
            last: props2.index === count - 1
        });
    const goToNextStep = ()=>{
        send({
            type: "STEP.NEXT",
            src: "next.trigger.click"
        });
    };
    const goToPrevStep = ()=>{
        send({
            type: "STEP.PREV",
            src: "prev.trigger.click"
        });
    };
    const resetStep = ()=>{
        send({
            type: "STEP.RESET",
            src: "reset.trigger.click"
        });
    };
    const setStep = (value)=>{
        send({
            type: "STEP.SET",
            value,
            src: "api.setValue"
        });
    };
    return {
        value: step,
        count,
        percent,
        hasNextStep,
        hasPrevStep,
        isCompleted: computed("completed"),
        goToNextStep,
        goToPrevStep,
        resetStep,
        getItemState,
        setStep,
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                id: getRootId(scope),
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                style: {
                    "--percent": `${percent}%`
                }
            });
        },
        getListProps () {
            const arr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromLength"])(count);
            const triggerIds = arr.map((_, index)=>getTriggerId(scope, index));
            return normalize.element({
                ...parts.list.attrs,
                dir: prop("dir"),
                id: getListId(scope),
                role: "tablist",
                "aria-owns": triggerIds.join(" "),
                "aria-orientation": prop("orientation"),
                "data-orientation": prop("orientation")
            });
        },
        getItemProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.item.attrs,
                dir: prop("dir"),
                "aria-current": itemState.current ? "step" : void 0,
                "data-orientation": prop("orientation")
            });
        },
        getTriggerProps (props2) {
            const itemState = getItemState(props2);
            return normalize.button({
                ...parts.trigger.attrs,
                id: itemState.triggerId,
                role: "tab",
                dir: prop("dir"),
                tabIndex: !prop("linear") || itemState.current ? 0 : -1,
                "aria-selected": itemState.current,
                "aria-controls": itemState.contentId,
                "data-state": itemState.current ? "open" : "closed",
                "data-orientation": prop("orientation"),
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.completed),
                "data-current": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.current),
                "data-incomplete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.incomplete),
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (prop("linear")) return;
                    send({
                        type: "STEP.SET",
                        value: props2.index,
                        src: "trigger.click"
                    });
                }
            });
        },
        getContentProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.content.attrs,
                dir: prop("dir"),
                id: itemState.contentId,
                role: "tabpanel",
                tabIndex: 0,
                hidden: !itemState.current,
                "data-state": itemState.current ? "open" : "closed",
                "data-orientation": prop("orientation"),
                "aria-labelledby": itemState.triggerId
            });
        },
        getIndicatorProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.indicator.attrs,
                dir: prop("dir"),
                "aria-hidden": true,
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.completed),
                "data-current": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.current),
                "data-incomplete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.incomplete)
            });
        },
        getSeparatorProps (props2) {
            const itemState = getItemState(props2);
            return normalize.element({
                ...parts.separator.attrs,
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.completed),
                "data-current": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.current),
                "data-incomplete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(itemState.incomplete)
            });
        },
        getNextTriggerProps () {
            return normalize.button({
                ...parts.nextTrigger.attrs,
                dir: prop("dir"),
                type: "button",
                disabled: !hasNextStep,
                onClick (event) {
                    if (event.defaultPrevented) return;
                    goToNextStep();
                }
            });
        },
        getPrevTriggerProps () {
            return normalize.button({
                dir: prop("dir"),
                ...parts.prevTrigger.attrs,
                type: "button",
                disabled: !hasPrevStep,
                onClick (event) {
                    if (event.defaultPrevented) return;
                    goToPrevStep();
                }
            });
        },
        getProgressProps () {
            return normalize.element({
                dir: prop("dir"),
                ...parts.progress.attrs,
                role: "progressbar",
                "aria-valuenow": percent,
                "aria-valuemin": 0,
                "aria-valuemax": 100,
                "aria-valuetext": `${percent}% complete`,
                "data-complete": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(percent === 100)
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            defaultStep: 0,
            count: 1,
            linear: false,
            orientation: "horizontal",
            ...props2
        };
    },
    context ({ prop, bindable }) {
        return {
            step: bindable(()=>({
                    defaultValue: prop("defaultStep"),
                    value: prop("step"),
                    onChange (value) {
                        prop("onStepChange")?.({
                            step: value
                        });
                        const completed = value == prop("count");
                        if (completed) prop("onStepComplete")?.();
                    }
                }))
        };
    },
    computed: {
        percent: ({ context, prop })=>context.get("step") / prop("count") * 100,
        hasNextStep: ({ context, prop })=>context.get("step") < prop("count"),
        hasPrevStep: ({ context })=>context.get("step") > 0,
        completed: ({ context, prop })=>context.get("step") === prop("count")
    },
    initialState () {
        return "idle";
    },
    entry: [
        "validateStep"
    ],
    states: {
        idle: {
            on: {
                "STEP.SET": {
                    actions: [
                        "setStep"
                    ]
                },
                "STEP.NEXT": {
                    actions: [
                        "goToNextStep"
                    ]
                },
                "STEP.PREV": {
                    actions: [
                        "goToPrevStep"
                    ]
                },
                "STEP.RESET": {
                    actions: [
                        "resetStep"
                    ]
                }
            }
        }
    },
    implementations: {
        actions: {
            goToNextStep ({ context, prop }) {
                const value = Math.min(context.get("step") + 1, prop("count"));
                context.set("step", value);
            },
            goToPrevStep ({ context }) {
                const value = Math.max(context.get("step") - 1, 0);
                context.set("step", value);
            },
            resetStep ({ context }) {
                context.set("step", 0);
            },
            setStep ({ context, event }) {
                context.set("step", event.value);
            },
            validateStep ({ context, prop }) {
                validateStep(prop("count"), context.get("step"));
            }
        }
    }
});
var validateStep = (count, step)=>{
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValueWithinRange"])(step, 0, count)) {
        throw new RangeError(`[zag-js/steps] step index ${step} is out of bounds`);
    }
};
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "count",
    "dir",
    "getRootNode",
    "id",
    "ids",
    "linear",
    "onStepChange",
    "onStepComplete",
    "orientation",
    "step",
    "defaultStep"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}}),
"[project]/node_modules/@zag-js/tabs/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "anatomy": (()=>anatomy),
    "connect": (()=>connect),
    "contentProps": (()=>contentProps),
    "machine": (()=>machine),
    "props": (()=>props),
    "splitContentProps": (()=>splitContentProps),
    "splitProps": (()=>splitProps),
    "splitTriggerProps": (()=>splitTriggerProps),
    "triggerProps": (()=>triggerProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/tabs.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("tabs").parts("root", "list", "trigger", "content", "indicator");
var parts = anatomy.build();
var getRootId = (ctx)=>ctx.ids?.root ?? `tabs:${ctx.id}`;
var getListId = (ctx)=>ctx.ids?.list ?? `tabs:${ctx.id}:list`;
var getContentId = (ctx, id)=>ctx.ids?.content ?? `tabs:${ctx.id}:content-${id}`;
var getTriggerId = (ctx, id)=>ctx.ids?.trigger ?? `tabs:${ctx.id}:trigger-${id}`;
var getIndicatorId = (ctx)=>ctx.ids?.indicator ?? `tabs:${ctx.id}:indicator`;
var getListEl = (ctx)=>ctx.getById(getListId(ctx));
var getContentEl = (ctx, id)=>ctx.getById(getContentId(ctx, id));
var getTriggerEl = (ctx, id)=>ctx.getById(getTriggerId(ctx, id));
var getIndicatorEl = (ctx)=>ctx.getById(getIndicatorId(ctx));
var getElements = (ctx)=>{
    const ownerId = CSS.escape(getListId(ctx));
    const selector = `[role=tab][data-ownedby='${ownerId}']:not([disabled])`;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["queryAll"])(getListEl(ctx), selector);
};
var getFirstTriggerEl = (ctx)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["first"])(getElements(ctx));
var getLastTriggerEl = (ctx)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["last"])(getElements(ctx));
var getNextTriggerEl = (ctx, opts)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nextById"])(getElements(ctx), getTriggerId(ctx, opts.value), opts.loopFocus);
var getPrevTriggerEl = (ctx, opts)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prevById"])(getElements(ctx), getTriggerId(ctx, opts.value), opts.loopFocus);
var getOffsetRect = (el)=>{
    return {
        left: el?.offsetLeft ?? 0,
        top: el?.offsetTop ?? 0,
        width: el?.offsetWidth ?? 0,
        height: el?.offsetHeight ?? 0
    };
};
var getRectById = (ctx, id)=>{
    const tab = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["itemById"])(getElements(ctx), getTriggerId(ctx, id));
    return resolveRect(getOffsetRect(tab));
};
var resolveRect = (rect)=>({
        width: `${rect.width}px`,
        height: `${rect.height}px`,
        left: `${rect.left}px`,
        top: `${rect.top}px`
    });
// src/tabs.connect.ts
function connect(service, normalize) {
    const { state, send, context, prop, scope } = service;
    const translations = prop("translations");
    const focused = state.matches("focused");
    const isVertical = prop("orientation") === "vertical";
    const isHorizontal = prop("orientation") === "horizontal";
    const composite = prop("composite");
    function getTriggerState(props2) {
        return {
            selected: context.get("value") === props2.value,
            focused: context.get("focusedValue") === props2.value,
            disabled: !!props2.disabled
        };
    }
    return {
        value: context.get("value"),
        focusedValue: context.get("focusedValue"),
        setValue (value) {
            send({
                type: "SET_VALUE",
                value
            });
        },
        clearValue () {
            send({
                type: "CLEAR_VALUE"
            });
        },
        setIndicatorRect (value) {
            const id = getTriggerId(scope, value);
            send({
                type: "SET_INDICATOR_RECT",
                id
            });
        },
        syncTabIndex () {
            send({
                type: "SYNC_TAB_INDEX"
            });
        },
        selectNext (fromValue) {
            send({
                type: "TAB_FOCUS",
                value: fromValue,
                src: "selectNext"
            });
            send({
                type: "ARROW_NEXT",
                src: "selectNext"
            });
        },
        selectPrev (fromValue) {
            send({
                type: "TAB_FOCUS",
                value: fromValue,
                src: "selectPrev"
            });
            send({
                type: "ARROW_PREV",
                src: "selectPrev"
            });
        },
        focus () {
            const value = context.get("value");
            if (!value) return;
            getTriggerEl(scope, value)?.focus();
        },
        getRootProps () {
            return normalize.element({
                ...parts.root.attrs,
                id: getRootId(scope),
                "data-orientation": prop("orientation"),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                dir: prop("dir")
            });
        },
        getListProps () {
            return normalize.element({
                ...parts.list.attrs,
                id: getListId(scope),
                role: "tablist",
                dir: prop("dir"),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(focused),
                "aria-orientation": prop("orientation"),
                "data-orientation": prop("orientation"),
                "aria-label": translations?.listLabel,
                onKeyDown (event) {
                    if (event.defaultPrevented) return;
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSelfTarget"])(event)) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isComposingEvent"])(event)) return;
                    const keyMap = {
                        ArrowDown () {
                            if (isHorizontal) return;
                            send({
                                type: "ARROW_NEXT",
                                key: "ArrowDown"
                            });
                        },
                        ArrowUp () {
                            if (isHorizontal) return;
                            send({
                                type: "ARROW_PREV",
                                key: "ArrowUp"
                            });
                        },
                        ArrowLeft () {
                            if (isVertical) return;
                            send({
                                type: "ARROW_PREV",
                                key: "ArrowLeft"
                            });
                        },
                        ArrowRight () {
                            if (isVertical) return;
                            send({
                                type: "ARROW_NEXT",
                                key: "ArrowRight"
                            });
                        },
                        Home () {
                            send({
                                type: "HOME"
                            });
                        },
                        End () {
                            send({
                                type: "END"
                            });
                        },
                        Enter () {
                            send({
                                type: "ENTER"
                            });
                        }
                    };
                    let key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventKey"])(event, {
                        dir: prop("dir"),
                        orientation: prop("orientation")
                    });
                    const exec = keyMap[key];
                    if (exec) {
                        event.preventDefault();
                        exec(event);
                    }
                }
            });
        },
        getTriggerState,
        getTriggerProps (props2) {
            const { value, disabled } = props2;
            const triggerState = getTriggerState(props2);
            return normalize.button({
                ...parts.trigger.attrs,
                role: "tab",
                type: "button",
                disabled,
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(disabled),
                "aria-disabled": disabled,
                "data-value": value,
                "aria-selected": triggerState.selected,
                "data-selected": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(triggerState.selected),
                "data-focus": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(triggerState.focused),
                "aria-controls": triggerState.selected ? getContentId(scope, value) : void 0,
                "data-ownedby": getListId(scope),
                "data-ssr": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(context.get("ssr")),
                id: getTriggerId(scope, value),
                tabIndex: triggerState.selected && composite ? 0 : -1,
                onFocus () {
                    send({
                        type: "TAB_FOCUS",
                        value
                    });
                },
                onBlur (event) {
                    const target = event.relatedTarget;
                    if (target?.getAttribute("role") !== "tab") {
                        send({
                            type: "TAB_BLUR"
                        });
                    }
                },
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (disabled) return;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSafari"])()) {
                        event.currentTarget.focus();
                    }
                    send({
                        type: "TAB_CLICK",
                        value
                    });
                }
            });
        },
        getContentProps (props2) {
            const { value } = props2;
            const selected = context.get("value") === value;
            return normalize.element({
                ...parts.content.attrs,
                dir: prop("dir"),
                id: getContentId(scope, value),
                tabIndex: composite ? 0 : -1,
                "aria-labelledby": getTriggerId(scope, value),
                role: "tabpanel",
                "data-ownedby": getListId(scope),
                "data-selected": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(selected),
                "data-orientation": prop("orientation"),
                hidden: !selected
            });
        },
        getIndicatorProps () {
            const indicatorRect = context.get("indicatorRect");
            const indicatorTransition = context.get("indicatorTransition");
            return normalize.element({
                id: getIndicatorId(scope),
                ...parts.indicator.attrs,
                dir: prop("dir"),
                "data-orientation": prop("orientation"),
                style: {
                    "--transition-property": "left, right, top, bottom, width, height",
                    "--left": indicatorRect.left,
                    "--top": indicatorRect.top,
                    "--width": indicatorRect.width,
                    "--height": indicatorRect.height,
                    position: "absolute",
                    willChange: "var(--transition-property)",
                    transitionProperty: "var(--transition-property)",
                    transitionDuration: indicatorTransition ? "var(--transition-duration, 150ms)" : "0ms",
                    transitionTimingFunction: "var(--transition-timing-function)",
                    [isHorizontal ? "left" : "top"]: isHorizontal ? "var(--left)" : "var(--top)"
                }
            });
        }
    };
}
var { not } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGuards"])();
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            dir: "ltr",
            orientation: "horizontal",
            activationMode: "automatic",
            loopFocus: true,
            composite: true,
            navigate (details) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clickIfLink"])(details.node);
            },
            defaultValue: null,
            ...props2
        };
    },
    initialState () {
        return "idle";
    },
    context ({ prop, bindable }) {
        return {
            value: bindable(()=>({
                    defaultValue: prop("defaultValue"),
                    value: prop("value"),
                    onChange (value) {
                        prop("onValueChange")?.({
                            value
                        });
                    }
                })),
            focusedValue: bindable(()=>({
                    defaultValue: prop("value") || prop("defaultValue"),
                    sync: true,
                    onChange (value) {
                        prop("onFocusChange")?.({
                            focusedValue: value
                        });
                    }
                })),
            ssr: bindable(()=>({
                    defaultValue: true
                })),
            indicatorTransition: bindable(()=>({
                    defaultValue: false
                })),
            indicatorRect: bindable(()=>({
                    defaultValue: {
                        left: "0px",
                        top: "0px",
                        width: "0px",
                        height: "0px"
                    }
                }))
        };
    },
    watch ({ context, prop, track, action }) {
        track([
            ()=>context.get("value")
        ], ()=>{
            action([
                "allowIndicatorTransition",
                "syncIndicatorRect",
                "syncTabIndex",
                "navigateIfNeeded"
            ]);
        });
        track([
            ()=>prop("dir"),
            ()=>prop("orientation")
        ], ()=>{
            action([
                "syncIndicatorRect"
            ]);
        });
    },
    on: {
        SET_VALUE: {
            actions: [
                "setValue"
            ]
        },
        CLEAR_VALUE: {
            actions: [
                "clearValue"
            ]
        },
        SET_INDICATOR_RECT: {
            actions: [
                "setIndicatorRect"
            ]
        },
        SYNC_TAB_INDEX: {
            actions: [
                "syncTabIndex"
            ]
        }
    },
    entry: [
        "syncIndicatorRect",
        "syncTabIndex",
        "syncSsr"
    ],
    exit: [
        "cleanupObserver"
    ],
    states: {
        idle: {
            on: {
                TAB_FOCUS: {
                    target: "focused",
                    actions: [
                        "setFocusedValue"
                    ]
                },
                TAB_CLICK: {
                    target: "focused",
                    actions: [
                        "setFocusedValue",
                        "setValue"
                    ]
                }
            }
        },
        focused: {
            on: {
                TAB_CLICK: {
                    target: "focused",
                    actions: [
                        "setFocusedValue",
                        "setValue"
                    ]
                },
                ARROW_PREV: [
                    {
                        guard: "selectOnFocus",
                        actions: [
                            "focusPrevTab",
                            "selectFocusedTab"
                        ]
                    },
                    {
                        actions: [
                            "focusPrevTab"
                        ]
                    }
                ],
                ARROW_NEXT: [
                    {
                        guard: "selectOnFocus",
                        actions: [
                            "focusNextTab",
                            "selectFocusedTab"
                        ]
                    },
                    {
                        actions: [
                            "focusNextTab"
                        ]
                    }
                ],
                HOME: [
                    {
                        guard: "selectOnFocus",
                        actions: [
                            "focusFirstTab",
                            "selectFocusedTab"
                        ]
                    },
                    {
                        actions: [
                            "focusFirstTab"
                        ]
                    }
                ],
                END: [
                    {
                        guard: "selectOnFocus",
                        actions: [
                            "focusLastTab",
                            "selectFocusedTab"
                        ]
                    },
                    {
                        actions: [
                            "focusLastTab"
                        ]
                    }
                ],
                ENTER: {
                    guard: not("selectOnFocus"),
                    actions: [
                        "selectFocusedTab"
                    ]
                },
                TAB_FOCUS: {
                    actions: [
                        "setFocusedValue"
                    ]
                },
                TAB_BLUR: {
                    target: "idle",
                    actions: [
                        "clearFocusedValue"
                    ]
                }
            }
        }
    },
    implementations: {
        guards: {
            selectOnFocus: ({ prop })=>prop("activationMode") === "automatic"
        },
        actions: {
            selectFocusedTab ({ context, prop }) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const focusedValue = context.get("focusedValue");
                    if (!focusedValue) return;
                    const nullable = prop("deselectable") && context.get("value") === focusedValue;
                    const value = nullable ? null : focusedValue;
                    context.set("value", value);
                });
            },
            setFocusedValue ({ context, event, flush }) {
                if (event.value == null) return;
                flush(()=>{
                    context.set("focusedValue", event.value);
                });
            },
            clearFocusedValue ({ context }) {
                context.set("focusedValue", null);
            },
            setValue ({ context, event, prop }) {
                const nullable = prop("deselectable") && context.get("value") === context.get("focusedValue");
                context.set("value", nullable ? null : event.value);
            },
            clearValue ({ context }) {
                context.set("value", null);
            },
            focusFirstTab ({ scope }) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    getFirstTriggerEl(scope)?.focus();
                });
            },
            focusLastTab ({ scope }) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    getLastTriggerEl(scope)?.focus();
                });
            },
            focusNextTab ({ context, prop, scope, event }) {
                const focusedValue = event.value ?? context.get("focusedValue");
                if (!focusedValue) return;
                const triggerEl = getNextTriggerEl(scope, {
                    value: focusedValue,
                    loopFocus: prop("loopFocus")
                });
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    if (prop("composite")) {
                        triggerEl?.focus();
                    } else if (triggerEl?.dataset.value != null) {
                        context.set("focusedValue", triggerEl.dataset.value);
                    }
                });
            },
            focusPrevTab ({ context, prop, scope, event }) {
                const focusedValue = event.value ?? context.get("focusedValue");
                if (!focusedValue) return;
                const triggerEl = getPrevTriggerEl(scope, {
                    value: focusedValue,
                    loopFocus: prop("loopFocus")
                });
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    if (prop("composite")) {
                        triggerEl?.focus();
                    } else if (triggerEl?.dataset.value != null) {
                        context.set("focusedValue", triggerEl.dataset.value);
                    }
                });
            },
            syncTabIndex ({ context, scope }) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["raf"])(()=>{
                    const value = context.get("value");
                    if (!value) return;
                    const contentEl = getContentEl(scope, value);
                    if (!contentEl) return;
                    const focusables = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getFocusables"])(contentEl);
                    if (focusables.length > 0) {
                        contentEl.removeAttribute("tabindex");
                    } else {
                        contentEl.setAttribute("tabindex", "0");
                    }
                });
            },
            cleanupObserver ({ refs }) {
                const cleanup = refs.get("indicatorCleanup");
                if (cleanup) cleanup();
            },
            allowIndicatorTransition ({ context }) {
                context.set("indicatorTransition", true);
            },
            setIndicatorRect ({ context, event, scope }) {
                const value = event.id ?? context.get("value");
                const indicatorEl = getIndicatorEl(scope);
                if (!indicatorEl) return;
                if (!value) {
                    context.set("indicatorTransition", false);
                    return;
                }
                const triggerEl = getTriggerEl(scope, value);
                if (!triggerEl) return;
                context.set("indicatorRect", getRectById(scope, value));
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nextTick"])(()=>{
                    context.set("indicatorTransition", false);
                });
            },
            syncSsr ({ context }) {
                context.set("ssr", false);
            },
            syncIndicatorRect ({ context, refs, scope }) {
                const cleanup = refs.get("indicatorCleanup");
                if (cleanup) cleanup();
                const value = context.get("value");
                if (!value) {
                    context.set("indicatorTransition", false);
                    return;
                }
                const triggerEl = getTriggerEl(scope, value);
                const indicatorEl = getIndicatorEl(scope);
                if (!triggerEl || !indicatorEl) return;
                const indicatorCleanup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trackElementRect"])([
                    triggerEl
                ], {
                    measure (el) {
                        return getOffsetRect(el);
                    },
                    onEntry ({ rects }) {
                        const [rect] = rects;
                        context.set("indicatorRect", resolveRect(rect));
                    }
                });
                refs.set("indicatorCleanup", indicatorCleanup);
            },
            navigateIfNeeded ({ context, prop, scope }) {
                const value = context.get("value");
                if (!value) return;
                const triggerEl = getTriggerEl(scope, value);
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAnchorElement"])(triggerEl)) {
                    prop("navigate")?.({
                        value,
                        node: triggerEl,
                        href: triggerEl.href
                    });
                }
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "activationMode",
    "composite",
    "deselectable",
    "dir",
    "getRootNode",
    "id",
    "ids",
    "loopFocus",
    "navigate",
    "onFocusChange",
    "onValueChange",
    "orientation",
    "translations",
    "value",
    "defaultValue"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
var triggerProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "disabled",
    "value"
]);
var splitTriggerProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(triggerProps);
var contentProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "value"
]);
var splitContentProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(contentProps);
;
}}),
"[project]/node_modules/@zag-js/toggle/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "anatomy": (()=>anatomy),
    "connect": (()=>connect),
    "machine": (()=>machine),
    "props": (()=>props),
    "splitProps": (()=>splitProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/anatomy/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/dom-query/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/core/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/types/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zag-js/utils/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
// src/toggle.anatomy.ts
var anatomy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$anatomy$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnatomy"])("toggle", [
    "root",
    "indicator"
]);
var parts = anatomy.build();
function connect(service, normalize) {
    const { context, prop, send } = service;
    const pressed = context.get("pressed");
    return {
        pressed,
        disabled: !!prop("disabled"),
        setPressed (value) {
            send({
                type: "PRESS.SET",
                value
            });
        },
        getRootProps () {
            return normalize.element({
                type: "button",
                ...parts.root.attrs,
                disabled: prop("disabled"),
                "aria-pressed": pressed,
                "data-state": pressed ? "on" : "off",
                "data-pressed": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(pressed),
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("disabled")),
                onClick (event) {
                    if (event.defaultPrevented) return;
                    if (prop("disabled")) return;
                    send({
                        type: "PRESS.TOGGLE"
                    });
                }
            });
        },
        getIndicatorProps () {
            return normalize.element({
                ...parts.indicator.attrs,
                "data-disabled": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(prop("disabled")),
                "data-pressed": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$dom$2d$query$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataAttr"])(pressed),
                "data-state": pressed ? "on" : "off"
            });
        }
    };
}
var machine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMachine"])({
    props ({ props: props2 }) {
        return {
            defaultPressed: false,
            ...props2
        };
    },
    context ({ prop, bindable }) {
        return {
            pressed: bindable(()=>({
                    value: prop("pressed"),
                    defaultValue: prop("defaultPressed"),
                    onChange (value) {
                        prop("onPressedChange")?.(value);
                    }
                }))
        };
    },
    initialState () {
        return "idle";
    },
    on: {
        "PRESS.TOGGLE": {
            actions: [
                "togglePressed"
            ]
        },
        "PRESS.SET": {
            actions: [
                "setPressed"
            ]
        }
    },
    states: {
        idle: {}
    },
    implementations: {
        actions: {
            togglePressed ({ context }) {
                context.set("pressed", !context.get("pressed"));
            },
            setPressed ({ context, event }) {
                context.set("pressed", event.value);
            }
        }
    }
});
var props = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$types$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createProps"])()([
    "defaultPressed",
    "pressed",
    "onPressedChange",
    "disabled"
]);
var splitProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zag$2d$js$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSplitProps"])(props);
;
}}),
}]);

//# sourceMappingURL=node_modules_%40zag-js_41a6573f._.js.map